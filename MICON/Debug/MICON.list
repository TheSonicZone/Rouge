
MICON.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b54  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003c14  08003c14  00013c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c4c  08003c4c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c4c  08003c4c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c4c  08003c4c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c4c  08003c4c  00013c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c50  08003c50  00013c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003c54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  2000000c  08003c60  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08003c60  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c17  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023f3  00000000  00000000  00031c4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  00034040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  00035020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4e1  00000000  00000000  00035f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012b61  00000000  00000000  000503f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c3ab  00000000  00000000  00062f5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ff305  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003948  00000000  00000000  000ff358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003bfc 	.word	0x08003bfc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003bfc 	.word	0x08003bfc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:


//-----------------------------------------------------------------------------------------------
//                                          Main Function
//-----------------------------------------------------------------------------------------------
int main(void){
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0

  // Initialisation of HAL, and peripherals
  HAL_Init();
 8000224:	f000 fcbc 	bl	8000ba0 <HAL_Init>
  SystemClock_Config();
 8000228:	f000 f80e 	bl	8000248 <SystemClock_Config>
  MX_GPIO_Init();
 800022c:	f000 f9f0 	bl	8000610 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000230:	f000 f8e0 	bl	80003f4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000234:	f000 f9bc 	bl	80005b0 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8000238:	f000 f87a 	bl	8000330 <MX_RTC_Init>
  MX_TIM1_Init();
 800023c:	f000 f914 	bl	8000468 <MX_TIM1_Init>
  MX_TIM7_Init();
 8000240:	f000 f97a 	bl	8000538 <MX_TIM7_Init>

  while (1){
 8000244:	e7fe      	b.n	8000244 <main+0x24>
	...

08000248 <SystemClock_Config>:

//------------------------------------------------------------------------
// Functions
//------------------------------------------------------------------------
void SystemClock_Config(void)
{
 8000248:	b590      	push	{r4, r7, lr}
 800024a:	b099      	sub	sp, #100	; 0x64
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	242c      	movs	r4, #44	; 0x2c
 8000250:	193b      	adds	r3, r7, r4
 8000252:	0018      	movs	r0, r3
 8000254:	2334      	movs	r3, #52	; 0x34
 8000256:	001a      	movs	r2, r3
 8000258:	2100      	movs	r1, #0
 800025a:	f003 fcc7 	bl	8003bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025e:	231c      	movs	r3, #28
 8000260:	18fb      	adds	r3, r7, r3
 8000262:	0018      	movs	r0, r3
 8000264:	2310      	movs	r3, #16
 8000266:	001a      	movs	r2, r3
 8000268:	2100      	movs	r1, #0
 800026a:	f003 fcbf 	bl	8003bec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800026e:	003b      	movs	r3, r7
 8000270:	0018      	movs	r0, r3
 8000272:	231c      	movs	r3, #28
 8000274:	001a      	movs	r2, r3
 8000276:	2100      	movs	r1, #0
 8000278:	f003 fcb8 	bl	8003bec <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800027c:	f000 ffe6 	bl	800124c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 8000280:	4b29      	ldr	r3, [pc, #164]	; (8000328 <SystemClock_Config+0xe0>)
 8000282:	6a1a      	ldr	r2, [r3, #32]
 8000284:	4b28      	ldr	r3, [pc, #160]	; (8000328 <SystemClock_Config+0xe0>)
 8000286:	2118      	movs	r1, #24
 8000288:	430a      	orrs	r2, r1
 800028a:	621a      	str	r2, [r3, #32]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800028c:	0021      	movs	r1, r4
 800028e:	187b      	adds	r3, r7, r1
 8000290:	2205      	movs	r2, #5
 8000292:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000294:	187b      	adds	r3, r7, r1
 8000296:	2201      	movs	r2, #1
 8000298:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800029a:	187b      	adds	r3, r7, r1
 800029c:	2201      	movs	r2, #1
 800029e:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a0:	187b      	adds	r3, r7, r1
 80002a2:	2202      	movs	r2, #2
 80002a4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002a6:	187b      	adds	r3, r7, r1
 80002a8:	2280      	movs	r2, #128	; 0x80
 80002aa:	0252      	lsls	r2, r2, #9
 80002ac:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	2280      	movs	r2, #128	; 0x80
 80002b2:	0352      	lsls	r2, r2, #13
 80002b4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	2200      	movs	r2, #0
 80002ba:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	0018      	movs	r0, r3
 80002c0:	f000 ffd2 	bl	8001268 <HAL_RCC_OscConfig>
 80002c4:	1e03      	subs	r3, r0, #0
 80002c6:	d001      	beq.n	80002cc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002c8:	f000 fa40 	bl	800074c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002cc:	211c      	movs	r1, #28
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	2207      	movs	r2, #7
 80002d2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	2202      	movs	r2, #2
 80002d8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	2200      	movs	r2, #0
 80002de:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	22c0      	movs	r2, #192	; 0xc0
 80002e4:	00d2      	lsls	r2, r2, #3
 80002e6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2101      	movs	r1, #1
 80002ec:	0018      	movs	r0, r3
 80002ee:	f001 fb41 	bl	8001974 <HAL_RCC_ClockConfig>
 80002f2:	1e03      	subs	r3, r0, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80002f6:	f000 fa29 	bl	800074c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 80002fa:	003b      	movs	r3, r7
 80002fc:	4a0b      	ldr	r2, [pc, #44]	; (800032c <SystemClock_Config+0xe4>)
 80002fe:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000300:	003b      	movs	r3, r7
 8000302:	2200      	movs	r2, #0
 8000304:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000306:	003b      	movs	r3, r7
 8000308:	2280      	movs	r2, #128	; 0x80
 800030a:	0052      	lsls	r2, r2, #1
 800030c:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800030e:	003b      	movs	r3, r7
 8000310:	0018      	movs	r0, r3
 8000312:	f001 fca9 	bl	8001c68 <HAL_RCCEx_PeriphCLKConfig>
 8000316:	1e03      	subs	r3, r0, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800031a:	f000 fa17 	bl	800074c <Error_Handler>
  }
}
 800031e:	46c0      	nop			; (mov r8, r8)
 8000320:	46bd      	mov	sp, r7
 8000322:	b019      	add	sp, #100	; 0x64
 8000324:	bd90      	pop	{r4, r7, pc}
 8000326:	46c0      	nop			; (mov r8, r8)
 8000328:	40021000 	.word	0x40021000
 800032c:	00010001 	.word	0x00010001

08000330 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b086      	sub	sp, #24
 8000334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	0018      	movs	r0, r3
 800033a:	2314      	movs	r3, #20
 800033c:	001a      	movs	r2, r3
 800033e:	2100      	movs	r1, #0
 8000340:	f003 fc54 	bl	8003bec <memset>
  RTC_DateTypeDef sDate = {0};
 8000344:	003b      	movs	r3, r7
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800034a:	4b28      	ldr	r3, [pc, #160]	; (80003ec <MX_RTC_Init+0xbc>)
 800034c:	4a28      	ldr	r2, [pc, #160]	; (80003f0 <MX_RTC_Init+0xc0>)
 800034e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000350:	4b26      	ldr	r3, [pc, #152]	; (80003ec <MX_RTC_Init+0xbc>)
 8000352:	2200      	movs	r2, #0
 8000354:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000356:	4b25      	ldr	r3, [pc, #148]	; (80003ec <MX_RTC_Init+0xbc>)
 8000358:	227f      	movs	r2, #127	; 0x7f
 800035a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800035c:	4b23      	ldr	r3, [pc, #140]	; (80003ec <MX_RTC_Init+0xbc>)
 800035e:	22ff      	movs	r2, #255	; 0xff
 8000360:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000362:	4b22      	ldr	r3, [pc, #136]	; (80003ec <MX_RTC_Init+0xbc>)
 8000364:	2200      	movs	r2, #0
 8000366:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000368:	4b20      	ldr	r3, [pc, #128]	; (80003ec <MX_RTC_Init+0xbc>)
 800036a:	2200      	movs	r2, #0
 800036c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800036e:	4b1f      	ldr	r3, [pc, #124]	; (80003ec <MX_RTC_Init+0xbc>)
 8000370:	2200      	movs	r2, #0
 8000372:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000374:	4b1d      	ldr	r3, [pc, #116]	; (80003ec <MX_RTC_Init+0xbc>)
 8000376:	0018      	movs	r0, r3
 8000378:	f001 fd74 	bl	8001e64 <HAL_RTC_Init>
 800037c:	1e03      	subs	r3, r0, #0
 800037e:	d001      	beq.n	8000384 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000380:	f000 f9e4 	bl	800074c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	2200      	movs	r2, #0
 8000388:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2200      	movs	r2, #0
 800038e:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	2200      	movs	r2, #0
 8000394:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	2200      	movs	r2, #0
 800039a:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	2200      	movs	r2, #0
 80003a0:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80003a2:	1d39      	adds	r1, r7, #4
 80003a4:	4b11      	ldr	r3, [pc, #68]	; (80003ec <MX_RTC_Init+0xbc>)
 80003a6:	2201      	movs	r2, #1
 80003a8:	0018      	movs	r0, r3
 80003aa:	f001 fdef 	bl	8001f8c <HAL_RTC_SetTime>
 80003ae:	1e03      	subs	r3, r0, #0
 80003b0:	d001      	beq.n	80003b6 <MX_RTC_Init+0x86>
  {
    Error_Handler();
 80003b2:	f000 f9cb 	bl	800074c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80003b6:	003b      	movs	r3, r7
 80003b8:	2201      	movs	r2, #1
 80003ba:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80003bc:	003b      	movs	r3, r7
 80003be:	2201      	movs	r2, #1
 80003c0:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80003c2:	003b      	movs	r3, r7
 80003c4:	2201      	movs	r2, #1
 80003c6:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80003c8:	003b      	movs	r3, r7
 80003ca:	2200      	movs	r2, #0
 80003cc:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80003ce:	0039      	movs	r1, r7
 80003d0:	4b06      	ldr	r3, [pc, #24]	; (80003ec <MX_RTC_Init+0xbc>)
 80003d2:	2201      	movs	r2, #1
 80003d4:	0018      	movs	r0, r3
 80003d6:	f001 fe95 	bl	8002104 <HAL_RTC_SetDate>
 80003da:	1e03      	subs	r3, r0, #0
 80003dc:	d001      	beq.n	80003e2 <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 80003de:	f000 f9b5 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	46bd      	mov	sp, r7
 80003e6:	b006      	add	sp, #24
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	200000ac 	.word	0x200000ac
 80003f0:	40002800 	.word	0x40002800

080003f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003f8:	4b19      	ldr	r3, [pc, #100]	; (8000460 <MX_SPI1_Init+0x6c>)
 80003fa:	4a1a      	ldr	r2, [pc, #104]	; (8000464 <MX_SPI1_Init+0x70>)
 80003fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80003fe:	4b18      	ldr	r3, [pc, #96]	; (8000460 <MX_SPI1_Init+0x6c>)
 8000400:	2200      	movs	r2, #0
 8000402:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000404:	4b16      	ldr	r3, [pc, #88]	; (8000460 <MX_SPI1_Init+0x6c>)
 8000406:	2200      	movs	r2, #0
 8000408:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800040a:	4b15      	ldr	r3, [pc, #84]	; (8000460 <MX_SPI1_Init+0x6c>)
 800040c:	22c0      	movs	r2, #192	; 0xc0
 800040e:	0092      	lsls	r2, r2, #2
 8000410:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000412:	4b13      	ldr	r3, [pc, #76]	; (8000460 <MX_SPI1_Init+0x6c>)
 8000414:	2200      	movs	r2, #0
 8000416:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000418:	4b11      	ldr	r3, [pc, #68]	; (8000460 <MX_SPI1_Init+0x6c>)
 800041a:	2200      	movs	r2, #0
 800041c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800041e:	4b10      	ldr	r3, [pc, #64]	; (8000460 <MX_SPI1_Init+0x6c>)
 8000420:	2200      	movs	r2, #0
 8000422:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000424:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <MX_SPI1_Init+0x6c>)
 8000426:	2200      	movs	r2, #0
 8000428:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800042a:	4b0d      	ldr	r3, [pc, #52]	; (8000460 <MX_SPI1_Init+0x6c>)
 800042c:	2200      	movs	r2, #0
 800042e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000430:	4b0b      	ldr	r3, [pc, #44]	; (8000460 <MX_SPI1_Init+0x6c>)
 8000432:	2200      	movs	r2, #0
 8000434:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000436:	4b0a      	ldr	r3, [pc, #40]	; (8000460 <MX_SPI1_Init+0x6c>)
 8000438:	2207      	movs	r2, #7
 800043a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800043c:	4b08      	ldr	r3, [pc, #32]	; (8000460 <MX_SPI1_Init+0x6c>)
 800043e:	2200      	movs	r2, #0
 8000440:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000442:	4b07      	ldr	r3, [pc, #28]	; (8000460 <MX_SPI1_Init+0x6c>)
 8000444:	2200      	movs	r2, #0
 8000446:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000448:	4b05      	ldr	r3, [pc, #20]	; (8000460 <MX_SPI1_Init+0x6c>)
 800044a:	0018      	movs	r0, r3
 800044c:	f001 ff76 	bl	800233c <HAL_SPI_Init>
 8000450:	1e03      	subs	r3, r0, #0
 8000452:	d001      	beq.n	8000458 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000454:	f000 f97a 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000458:	46c0      	nop			; (mov r8, r8)
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	20000114 	.word	0x20000114
 8000464:	40013000 	.word	0x40013000

08000468 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000468:	b590      	push	{r4, r7, lr}
 800046a:	b08d      	sub	sp, #52	; 0x34
 800046c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800046e:	240c      	movs	r4, #12
 8000470:	193b      	adds	r3, r7, r4
 8000472:	0018      	movs	r0, r3
 8000474:	2324      	movs	r3, #36	; 0x24
 8000476:	001a      	movs	r2, r3
 8000478:	2100      	movs	r1, #0
 800047a:	f003 fbb7 	bl	8003bec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	0018      	movs	r0, r3
 8000482:	2308      	movs	r3, #8
 8000484:	001a      	movs	r2, r3
 8000486:	2100      	movs	r1, #0
 8000488:	f003 fbb0 	bl	8003bec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800048c:	4b27      	ldr	r3, [pc, #156]	; (800052c <MX_TIM1_Init+0xc4>)
 800048e:	4a28      	ldr	r2, [pc, #160]	; (8000530 <MX_TIM1_Init+0xc8>)
 8000490:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000492:	4b26      	ldr	r3, [pc, #152]	; (800052c <MX_TIM1_Init+0xc4>)
 8000494:	2200      	movs	r2, #0
 8000496:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000498:	4b24      	ldr	r3, [pc, #144]	; (800052c <MX_TIM1_Init+0xc4>)
 800049a:	2200      	movs	r2, #0
 800049c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800049e:	4b23      	ldr	r3, [pc, #140]	; (800052c <MX_TIM1_Init+0xc4>)
 80004a0:	4a24      	ldr	r2, [pc, #144]	; (8000534 <MX_TIM1_Init+0xcc>)
 80004a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004a4:	4b21      	ldr	r3, [pc, #132]	; (800052c <MX_TIM1_Init+0xc4>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004aa:	4b20      	ldr	r3, [pc, #128]	; (800052c <MX_TIM1_Init+0xc4>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004b0:	4b1e      	ldr	r3, [pc, #120]	; (800052c <MX_TIM1_Init+0xc4>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80004b6:	0021      	movs	r1, r4
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	2201      	movs	r2, #1
 80004bc:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	2200      	movs	r2, #0
 80004c2:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	2201      	movs	r2, #1
 80004c8:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80004ca:	187b      	adds	r3, r7, r1
 80004cc:	2200      	movs	r2, #0
 80004ce:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 10;
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	220a      	movs	r2, #10
 80004d4:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	2200      	movs	r2, #0
 80004da:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80004dc:	187b      	adds	r3, r7, r1
 80004de:	2201      	movs	r2, #1
 80004e0:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80004e2:	187b      	adds	r3, r7, r1
 80004e4:	2200      	movs	r2, #0
 80004e6:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 10;
 80004e8:	187b      	adds	r3, r7, r1
 80004ea:	220a      	movs	r2, #10
 80004ec:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80004ee:	187a      	adds	r2, r7, r1
 80004f0:	4b0e      	ldr	r3, [pc, #56]	; (800052c <MX_TIM1_Init+0xc4>)
 80004f2:	0011      	movs	r1, r2
 80004f4:	0018      	movs	r0, r3
 80004f6:	f002 f945 	bl	8002784 <HAL_TIM_Encoder_Init>
 80004fa:	1e03      	subs	r3, r0, #0
 80004fc:	d001      	beq.n	8000502 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80004fe:	f000 f925 	bl	800074c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	2200      	movs	r2, #0
 800050c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800050e:	1d3a      	adds	r2, r7, #4
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <MX_TIM1_Init+0xc4>)
 8000512:	0011      	movs	r1, r2
 8000514:	0018      	movs	r0, r3
 8000516:	f002 fb9b 	bl	8002c50 <HAL_TIMEx_MasterConfigSynchronization>
 800051a:	1e03      	subs	r3, r0, #0
 800051c:	d001      	beq.n	8000522 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 800051e:	f000 f915 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	46bd      	mov	sp, r7
 8000526:	b00d      	add	sp, #52	; 0x34
 8000528:	bd90      	pop	{r4, r7, pc}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	200000cc 	.word	0x200000cc
 8000530:	40012c00 	.word	0x40012c00
 8000534:	0000ffff 	.word	0x0000ffff

08000538 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800053e:	003b      	movs	r3, r7
 8000540:	0018      	movs	r0, r3
 8000542:	2308      	movs	r3, #8
 8000544:	001a      	movs	r2, r3
 8000546:	2100      	movs	r1, #0
 8000548:	f003 fb50 	bl	8003bec <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800054c:	4b15      	ldr	r3, [pc, #84]	; (80005a4 <MX_TIM7_Init+0x6c>)
 800054e:	4a16      	ldr	r2, [pc, #88]	; (80005a8 <MX_TIM7_Init+0x70>)
 8000550:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000552:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <MX_TIM7_Init+0x6c>)
 8000554:	2200      	movs	r2, #0
 8000556:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <MX_TIM7_Init+0x6c>)
 800055a:	2200      	movs	r2, #0
 800055c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800055e:	4b11      	ldr	r3, [pc, #68]	; (80005a4 <MX_TIM7_Init+0x6c>)
 8000560:	4a12      	ldr	r2, [pc, #72]	; (80005ac <MX_TIM7_Init+0x74>)
 8000562:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000564:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <MX_TIM7_Init+0x6c>)
 8000566:	2280      	movs	r2, #128	; 0x80
 8000568:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <MX_TIM7_Init+0x6c>)
 800056c:	0018      	movs	r0, r3
 800056e:	f002 f8b9 	bl	80026e4 <HAL_TIM_Base_Init>
 8000572:	1e03      	subs	r3, r0, #0
 8000574:	d001      	beq.n	800057a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000576:	f000 f8e9 	bl	800074c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800057a:	003b      	movs	r3, r7
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000580:	003b      	movs	r3, r7
 8000582:	2200      	movs	r2, #0
 8000584:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000586:	003a      	movs	r2, r7
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <MX_TIM7_Init+0x6c>)
 800058a:	0011      	movs	r1, r2
 800058c:	0018      	movs	r0, r3
 800058e:	f002 fb5f 	bl	8002c50 <HAL_TIMEx_MasterConfigSynchronization>
 8000592:	1e03      	subs	r3, r0, #0
 8000594:	d001      	beq.n	800059a <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8000596:	f000 f8d9 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	b002      	add	sp, #8
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	20000178 	.word	0x20000178
 80005a8:	40001400 	.word	0x40001400
 80005ac:	0000ffff 	.word	0x0000ffff

080005b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005b4:	4b14      	ldr	r3, [pc, #80]	; (8000608 <MX_USART1_UART_Init+0x58>)
 80005b6:	4a15      	ldr	r2, [pc, #84]	; (800060c <MX_USART1_UART_Init+0x5c>)
 80005b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005ba:	4b13      	ldr	r3, [pc, #76]	; (8000608 <MX_USART1_UART_Init+0x58>)
 80005bc:	22e1      	movs	r2, #225	; 0xe1
 80005be:	0252      	lsls	r2, r2, #9
 80005c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005c2:	4b11      	ldr	r3, [pc, #68]	; (8000608 <MX_USART1_UART_Init+0x58>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005c8:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <MX_USART1_UART_Init+0x58>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <MX_USART1_UART_Init+0x58>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005d4:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <MX_USART1_UART_Init+0x58>)
 80005d6:	220c      	movs	r2, #12
 80005d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <MX_USART1_UART_Init+0x58>)
 80005dc:	2200      	movs	r2, #0
 80005de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e0:	4b09      	ldr	r3, [pc, #36]	; (8000608 <MX_USART1_UART_Init+0x58>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005e6:	4b08      	ldr	r3, [pc, #32]	; (8000608 <MX_USART1_UART_Init+0x58>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <MX_USART1_UART_Init+0x58>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005f2:	4b05      	ldr	r3, [pc, #20]	; (8000608 <MX_USART1_UART_Init+0x58>)
 80005f4:	0018      	movs	r0, r3
 80005f6:	f002 fb99 	bl	8002d2c <HAL_UART_Init>
 80005fa:	1e03      	subs	r3, r0, #0
 80005fc:	d001      	beq.n	8000602 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80005fe:	f000 f8a5 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000028 	.word	0x20000028
 800060c:	40013800 	.word	0x40013800

08000610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b08b      	sub	sp, #44	; 0x2c
 8000614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000616:	2414      	movs	r4, #20
 8000618:	193b      	adds	r3, r7, r4
 800061a:	0018      	movs	r0, r3
 800061c:	2314      	movs	r3, #20
 800061e:	001a      	movs	r2, r3
 8000620:	2100      	movs	r1, #0
 8000622:	f003 fae3 	bl	8003bec <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000626:	4b47      	ldr	r3, [pc, #284]	; (8000744 <MX_GPIO_Init+0x134>)
 8000628:	695a      	ldr	r2, [r3, #20]
 800062a:	4b46      	ldr	r3, [pc, #280]	; (8000744 <MX_GPIO_Init+0x134>)
 800062c:	2180      	movs	r1, #128	; 0x80
 800062e:	0309      	lsls	r1, r1, #12
 8000630:	430a      	orrs	r2, r1
 8000632:	615a      	str	r2, [r3, #20]
 8000634:	4b43      	ldr	r3, [pc, #268]	; (8000744 <MX_GPIO_Init+0x134>)
 8000636:	695a      	ldr	r2, [r3, #20]
 8000638:	2380      	movs	r3, #128	; 0x80
 800063a:	031b      	lsls	r3, r3, #12
 800063c:	4013      	ands	r3, r2
 800063e:	613b      	str	r3, [r7, #16]
 8000640:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000642:	4b40      	ldr	r3, [pc, #256]	; (8000744 <MX_GPIO_Init+0x134>)
 8000644:	695a      	ldr	r2, [r3, #20]
 8000646:	4b3f      	ldr	r3, [pc, #252]	; (8000744 <MX_GPIO_Init+0x134>)
 8000648:	2180      	movs	r1, #128	; 0x80
 800064a:	03c9      	lsls	r1, r1, #15
 800064c:	430a      	orrs	r2, r1
 800064e:	615a      	str	r2, [r3, #20]
 8000650:	4b3c      	ldr	r3, [pc, #240]	; (8000744 <MX_GPIO_Init+0x134>)
 8000652:	695a      	ldr	r2, [r3, #20]
 8000654:	2380      	movs	r3, #128	; 0x80
 8000656:	03db      	lsls	r3, r3, #15
 8000658:	4013      	ands	r3, r2
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	4b39      	ldr	r3, [pc, #228]	; (8000744 <MX_GPIO_Init+0x134>)
 8000660:	695a      	ldr	r2, [r3, #20]
 8000662:	4b38      	ldr	r3, [pc, #224]	; (8000744 <MX_GPIO_Init+0x134>)
 8000664:	2180      	movs	r1, #128	; 0x80
 8000666:	0289      	lsls	r1, r1, #10
 8000668:	430a      	orrs	r2, r1
 800066a:	615a      	str	r2, [r3, #20]
 800066c:	4b35      	ldr	r3, [pc, #212]	; (8000744 <MX_GPIO_Init+0x134>)
 800066e:	695a      	ldr	r2, [r3, #20]
 8000670:	2380      	movs	r3, #128	; 0x80
 8000672:	029b      	lsls	r3, r3, #10
 8000674:	4013      	ands	r3, r2
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	4b32      	ldr	r3, [pc, #200]	; (8000744 <MX_GPIO_Init+0x134>)
 800067c:	695a      	ldr	r2, [r3, #20]
 800067e:	4b31      	ldr	r3, [pc, #196]	; (8000744 <MX_GPIO_Init+0x134>)
 8000680:	2180      	movs	r1, #128	; 0x80
 8000682:	02c9      	lsls	r1, r1, #11
 8000684:	430a      	orrs	r2, r1
 8000686:	615a      	str	r2, [r3, #20]
 8000688:	4b2e      	ldr	r3, [pc, #184]	; (8000744 <MX_GPIO_Init+0x134>)
 800068a:	695a      	ldr	r2, [r3, #20]
 800068c:	2380      	movs	r3, #128	; 0x80
 800068e:	02db      	lsls	r3, r3, #11
 8000690:	4013      	ands	r3, r2
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000696:	4b2c      	ldr	r3, [pc, #176]	; (8000748 <MX_GPIO_Init+0x138>)
 8000698:	2200      	movs	r2, #0
 800069a:	217f      	movs	r1, #127	; 0x7f
 800069c:	0018      	movs	r0, r3
 800069e:	f000 fdb7 	bl	8001210 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 80006a2:	2390      	movs	r3, #144	; 0x90
 80006a4:	05db      	lsls	r3, r3, #23
 80006a6:	2200      	movs	r2, #0
 80006a8:	21f7      	movs	r1, #247	; 0xf7
 80006aa:	0018      	movs	r0, r3
 80006ac:	f000 fdb0 	bl	8001210 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : IRD_Pin */
  GPIO_InitStruct.Pin = IRD_Pin;
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	2280      	movs	r2, #128	; 0x80
 80006b4:	0192      	lsls	r2, r2, #6
 80006b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	2284      	movs	r2, #132	; 0x84
 80006bc:	0392      	lsls	r2, r2, #14
 80006be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	2201      	movs	r2, #1
 80006c4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IRD_GPIO_Port, &GPIO_InitStruct);
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	4a1f      	ldr	r2, [pc, #124]	; (8000748 <MX_GPIO_Init+0x138>)
 80006ca:	0019      	movs	r1, r3
 80006cc:	0010      	movs	r0, r2
 80006ce:	f000 fc27 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	227f      	movs	r2, #127	; 0x7f
 80006d6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	2201      	movs	r2, #1
 80006dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	4a16      	ldr	r2, [pc, #88]	; (8000748 <MX_GPIO_Init+0x138>)
 80006ee:	0019      	movs	r1, r3
 80006f0:	0010      	movs	r0, r2
 80006f2:	f000 fc15 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA4
                           PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	22f7      	movs	r2, #247	; 0xf7
 80006fa:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	2201      	movs	r2, #1
 8000700:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	193b      	adds	r3, r7, r4
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	193b      	adds	r3, r7, r4
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070e:	193a      	adds	r2, r7, r4
 8000710:	2390      	movs	r3, #144	; 0x90
 8000712:	05db      	lsls	r3, r3, #23
 8000714:	0011      	movs	r1, r2
 8000716:	0018      	movs	r0, r3
 8000718:	f000 fc02 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800071c:	193b      	adds	r3, r7, r4
 800071e:	2208      	movs	r2, #8
 8000720:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000722:	193b      	adds	r3, r7, r4
 8000724:	2200      	movs	r2, #0
 8000726:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	193b      	adds	r3, r7, r4
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072e:	193a      	adds	r2, r7, r4
 8000730:	2390      	movs	r3, #144	; 0x90
 8000732:	05db      	lsls	r3, r3, #23
 8000734:	0011      	movs	r1, r2
 8000736:	0018      	movs	r0, r3
 8000738:	f000 fbf2 	bl	8000f20 <HAL_GPIO_Init>

}
 800073c:	46c0      	nop			; (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	b00b      	add	sp, #44	; 0x2c
 8000742:	bd90      	pop	{r4, r7, pc}
 8000744:	40021000 	.word	0x40021000
 8000748:	48000800 	.word	0x48000800

0800074c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000750:	b672      	cpsid	i
}
 8000752:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000754:	e7fe      	b.n	8000754 <Error_Handler+0x8>
	...

08000758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <HAL_MspInit+0x44>)
 8000760:	699a      	ldr	r2, [r3, #24]
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <HAL_MspInit+0x44>)
 8000764:	2101      	movs	r1, #1
 8000766:	430a      	orrs	r2, r1
 8000768:	619a      	str	r2, [r3, #24]
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <HAL_MspInit+0x44>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	2201      	movs	r2, #1
 8000770:	4013      	ands	r3, r2
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <HAL_MspInit+0x44>)
 8000778:	69da      	ldr	r2, [r3, #28]
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <HAL_MspInit+0x44>)
 800077c:	2180      	movs	r1, #128	; 0x80
 800077e:	0549      	lsls	r1, r1, #21
 8000780:	430a      	orrs	r2, r1
 8000782:	61da      	str	r2, [r3, #28]
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <HAL_MspInit+0x44>)
 8000786:	69da      	ldr	r2, [r3, #28]
 8000788:	2380      	movs	r3, #128	; 0x80
 800078a:	055b      	lsls	r3, r3, #21
 800078c:	4013      	ands	r3, r2
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	b002      	add	sp, #8
 8000798:	bd80      	pop	{r7, pc}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	40021000 	.word	0x40021000

080007a0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a06      	ldr	r2, [pc, #24]	; (80007c8 <HAL_RTC_MspInit+0x28>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d106      	bne.n	80007c0 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_RTC_MspInit+0x2c>)
 80007b4:	6a1a      	ldr	r2, [r3, #32]
 80007b6:	4b05      	ldr	r3, [pc, #20]	; (80007cc <HAL_RTC_MspInit+0x2c>)
 80007b8:	2180      	movs	r1, #128	; 0x80
 80007ba:	0209      	lsls	r1, r1, #8
 80007bc:	430a      	orrs	r2, r1
 80007be:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80007c0:	46c0      	nop			; (mov r8, r8)
 80007c2:	46bd      	mov	sp, r7
 80007c4:	b002      	add	sp, #8
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40002800 	.word	0x40002800
 80007cc:	40021000 	.word	0x40021000

080007d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007d0:	b590      	push	{r4, r7, lr}
 80007d2:	b08b      	sub	sp, #44	; 0x2c
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	2414      	movs	r4, #20
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	0018      	movs	r0, r3
 80007de:	2314      	movs	r3, #20
 80007e0:	001a      	movs	r2, r3
 80007e2:	2100      	movs	r1, #0
 80007e4:	f003 fa02 	bl	8003bec <memset>
  if(hspi->Instance==SPI1)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a32      	ldr	r2, [pc, #200]	; (80008b8 <HAL_SPI_MspInit+0xe8>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d15e      	bne.n	80008b0 <HAL_SPI_MspInit+0xe0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007f2:	4b32      	ldr	r3, [pc, #200]	; (80008bc <HAL_SPI_MspInit+0xec>)
 80007f4:	699a      	ldr	r2, [r3, #24]
 80007f6:	4b31      	ldr	r3, [pc, #196]	; (80008bc <HAL_SPI_MspInit+0xec>)
 80007f8:	2180      	movs	r1, #128	; 0x80
 80007fa:	0149      	lsls	r1, r1, #5
 80007fc:	430a      	orrs	r2, r1
 80007fe:	619a      	str	r2, [r3, #24]
 8000800:	4b2e      	ldr	r3, [pc, #184]	; (80008bc <HAL_SPI_MspInit+0xec>)
 8000802:	699a      	ldr	r2, [r3, #24]
 8000804:	2380      	movs	r3, #128	; 0x80
 8000806:	015b      	lsls	r3, r3, #5
 8000808:	4013      	ands	r3, r2
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	4b2b      	ldr	r3, [pc, #172]	; (80008bc <HAL_SPI_MspInit+0xec>)
 8000810:	695a      	ldr	r2, [r3, #20]
 8000812:	4b2a      	ldr	r3, [pc, #168]	; (80008bc <HAL_SPI_MspInit+0xec>)
 8000814:	2180      	movs	r1, #128	; 0x80
 8000816:	0289      	lsls	r1, r1, #10
 8000818:	430a      	orrs	r2, r1
 800081a:	615a      	str	r2, [r3, #20]
 800081c:	4b27      	ldr	r3, [pc, #156]	; (80008bc <HAL_SPI_MspInit+0xec>)
 800081e:	695a      	ldr	r2, [r3, #20]
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	029b      	lsls	r3, r3, #10
 8000824:	4013      	ands	r3, r2
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	4b24      	ldr	r3, [pc, #144]	; (80008bc <HAL_SPI_MspInit+0xec>)
 800082c:	695a      	ldr	r2, [r3, #20]
 800082e:	4b23      	ldr	r3, [pc, #140]	; (80008bc <HAL_SPI_MspInit+0xec>)
 8000830:	2180      	movs	r1, #128	; 0x80
 8000832:	02c9      	lsls	r1, r1, #11
 8000834:	430a      	orrs	r2, r1
 8000836:	615a      	str	r2, [r3, #20]
 8000838:	4b20      	ldr	r3, [pc, #128]	; (80008bc <HAL_SPI_MspInit+0xec>)
 800083a:	695a      	ldr	r2, [r3, #20]
 800083c:	2380      	movs	r3, #128	; 0x80
 800083e:	02db      	lsls	r3, r3, #11
 8000840:	4013      	ands	r3, r2
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000846:	193b      	adds	r3, r7, r4
 8000848:	2280      	movs	r2, #128	; 0x80
 800084a:	0212      	lsls	r2, r2, #8
 800084c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	193b      	adds	r3, r7, r4
 8000850:	2202      	movs	r2, #2
 8000852:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	193b      	adds	r3, r7, r4
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800085a:	193b      	adds	r3, r7, r4
 800085c:	2203      	movs	r2, #3
 800085e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000860:	193b      	adds	r3, r7, r4
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000866:	193a      	adds	r2, r7, r4
 8000868:	2390      	movs	r3, #144	; 0x90
 800086a:	05db      	lsls	r3, r3, #23
 800086c:	0011      	movs	r1, r2
 800086e:	0018      	movs	r0, r3
 8000870:	f000 fb56 	bl	8000f20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000874:	0021      	movs	r1, r4
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2238      	movs	r2, #56	; 0x38
 800087a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2202      	movs	r2, #2
 8000880:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2203      	movs	r2, #3
 800088c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800088e:	187b      	adds	r3, r7, r1
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000894:	187b      	adds	r3, r7, r1
 8000896:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <HAL_SPI_MspInit+0xf0>)
 8000898:	0019      	movs	r1, r3
 800089a:	0010      	movs	r0, r2
 800089c:	f000 fb40 	bl	8000f20 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2100      	movs	r1, #0
 80008a4:	2019      	movs	r0, #25
 80008a6:	f000 fa8b 	bl	8000dc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80008aa:	2019      	movs	r0, #25
 80008ac:	f000 fa9d 	bl	8000dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	b00b      	add	sp, #44	; 0x2c
 80008b6:	bd90      	pop	{r4, r7, pc}
 80008b8:	40013000 	.word	0x40013000
 80008bc:	40021000 	.word	0x40021000
 80008c0:	48000400 	.word	0x48000400

080008c4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b08b      	sub	sp, #44	; 0x2c
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	2414      	movs	r4, #20
 80008ce:	193b      	adds	r3, r7, r4
 80008d0:	0018      	movs	r0, r3
 80008d2:	2314      	movs	r3, #20
 80008d4:	001a      	movs	r2, r3
 80008d6:	2100      	movs	r1, #0
 80008d8:	f003 f988 	bl	8003bec <memset>
  if(htim_encoder->Instance==TIM1)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a21      	ldr	r2, [pc, #132]	; (8000968 <HAL_TIM_Encoder_MspInit+0xa4>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d13b      	bne.n	800095e <HAL_TIM_Encoder_MspInit+0x9a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008e6:	4b21      	ldr	r3, [pc, #132]	; (800096c <HAL_TIM_Encoder_MspInit+0xa8>)
 80008e8:	699a      	ldr	r2, [r3, #24]
 80008ea:	4b20      	ldr	r3, [pc, #128]	; (800096c <HAL_TIM_Encoder_MspInit+0xa8>)
 80008ec:	2180      	movs	r1, #128	; 0x80
 80008ee:	0109      	lsls	r1, r1, #4
 80008f0:	430a      	orrs	r2, r1
 80008f2:	619a      	str	r2, [r3, #24]
 80008f4:	4b1d      	ldr	r3, [pc, #116]	; (800096c <HAL_TIM_Encoder_MspInit+0xa8>)
 80008f6:	699a      	ldr	r2, [r3, #24]
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	011b      	lsls	r3, r3, #4
 80008fc:	4013      	ands	r3, r2
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	4b1a      	ldr	r3, [pc, #104]	; (800096c <HAL_TIM_Encoder_MspInit+0xa8>)
 8000904:	695a      	ldr	r2, [r3, #20]
 8000906:	4b19      	ldr	r3, [pc, #100]	; (800096c <HAL_TIM_Encoder_MspInit+0xa8>)
 8000908:	2180      	movs	r1, #128	; 0x80
 800090a:	0289      	lsls	r1, r1, #10
 800090c:	430a      	orrs	r2, r1
 800090e:	615a      	str	r2, [r3, #20]
 8000910:	4b16      	ldr	r3, [pc, #88]	; (800096c <HAL_TIM_Encoder_MspInit+0xa8>)
 8000912:	695a      	ldr	r2, [r3, #20]
 8000914:	2380      	movs	r3, #128	; 0x80
 8000916:	029b      	lsls	r3, r3, #10
 8000918:	4013      	ands	r3, r2
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800091e:	193b      	adds	r3, r7, r4
 8000920:	22c0      	movs	r2, #192	; 0xc0
 8000922:	0092      	lsls	r2, r2, #2
 8000924:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	0021      	movs	r1, r4
 8000928:	187b      	adds	r3, r7, r1
 800092a:	2202      	movs	r2, #2
 800092c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800093a:	187b      	adds	r3, r7, r1
 800093c:	2202      	movs	r2, #2
 800093e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000940:	187a      	adds	r2, r7, r1
 8000942:	2390      	movs	r3, #144	; 0x90
 8000944:	05db      	lsls	r3, r3, #23
 8000946:	0011      	movs	r1, r2
 8000948:	0018      	movs	r0, r3
 800094a:	f000 fae9 	bl	8000f20 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	2100      	movs	r1, #0
 8000952:	200d      	movs	r0, #13
 8000954:	f000 fa34 	bl	8000dc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000958:	200d      	movs	r0, #13
 800095a:	f000 fa46 	bl	8000dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	b00b      	add	sp, #44	; 0x2c
 8000964:	bd90      	pop	{r4, r7, pc}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	40012c00 	.word	0x40012c00
 800096c:	40021000 	.word	0x40021000

08000970 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a0d      	ldr	r2, [pc, #52]	; (80009b4 <HAL_TIM_Base_MspInit+0x44>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d113      	bne.n	80009aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000982:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <HAL_TIM_Base_MspInit+0x48>)
 8000984:	69da      	ldr	r2, [r3, #28]
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <HAL_TIM_Base_MspInit+0x48>)
 8000988:	2120      	movs	r1, #32
 800098a:	430a      	orrs	r2, r1
 800098c:	61da      	str	r2, [r3, #28]
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <HAL_TIM_Base_MspInit+0x48>)
 8000990:	69db      	ldr	r3, [r3, #28]
 8000992:	2220      	movs	r2, #32
 8000994:	4013      	ands	r3, r2
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	2012      	movs	r0, #18
 80009a0:	f000 fa0e 	bl	8000dc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80009a4:	2012      	movs	r0, #18
 80009a6:	f000 fa20 	bl	8000dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	46bd      	mov	sp, r7
 80009ae:	b004      	add	sp, #16
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	40001400 	.word	0x40001400
 80009b8:	40021000 	.word	0x40021000

080009bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b08b      	sub	sp, #44	; 0x2c
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	2414      	movs	r4, #20
 80009c6:	193b      	adds	r3, r7, r4
 80009c8:	0018      	movs	r0, r3
 80009ca:	2314      	movs	r3, #20
 80009cc:	001a      	movs	r2, r3
 80009ce:	2100      	movs	r1, #0
 80009d0:	f003 f90c 	bl	8003bec <memset>
  if(huart->Instance==USART1)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a32      	ldr	r2, [pc, #200]	; (8000aa4 <HAL_UART_MspInit+0xe8>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d15e      	bne.n	8000a9c <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009de:	4b32      	ldr	r3, [pc, #200]	; (8000aa8 <HAL_UART_MspInit+0xec>)
 80009e0:	699a      	ldr	r2, [r3, #24]
 80009e2:	4b31      	ldr	r3, [pc, #196]	; (8000aa8 <HAL_UART_MspInit+0xec>)
 80009e4:	2180      	movs	r1, #128	; 0x80
 80009e6:	01c9      	lsls	r1, r1, #7
 80009e8:	430a      	orrs	r2, r1
 80009ea:	619a      	str	r2, [r3, #24]
 80009ec:	4b2e      	ldr	r3, [pc, #184]	; (8000aa8 <HAL_UART_MspInit+0xec>)
 80009ee:	699a      	ldr	r2, [r3, #24]
 80009f0:	2380      	movs	r3, #128	; 0x80
 80009f2:	01db      	lsls	r3, r3, #7
 80009f4:	4013      	ands	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	4b2b      	ldr	r3, [pc, #172]	; (8000aa8 <HAL_UART_MspInit+0xec>)
 80009fc:	695a      	ldr	r2, [r3, #20]
 80009fe:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <HAL_UART_MspInit+0xec>)
 8000a00:	2180      	movs	r1, #128	; 0x80
 8000a02:	0289      	lsls	r1, r1, #10
 8000a04:	430a      	orrs	r2, r1
 8000a06:	615a      	str	r2, [r3, #20]
 8000a08:	4b27      	ldr	r3, [pc, #156]	; (8000aa8 <HAL_UART_MspInit+0xec>)
 8000a0a:	695a      	ldr	r2, [r3, #20]
 8000a0c:	2380      	movs	r3, #128	; 0x80
 8000a0e:	029b      	lsls	r3, r3, #10
 8000a10:	4013      	ands	r3, r2
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	4b24      	ldr	r3, [pc, #144]	; (8000aa8 <HAL_UART_MspInit+0xec>)
 8000a18:	695a      	ldr	r2, [r3, #20]
 8000a1a:	4b23      	ldr	r3, [pc, #140]	; (8000aa8 <HAL_UART_MspInit+0xec>)
 8000a1c:	2180      	movs	r1, #128	; 0x80
 8000a1e:	02c9      	lsls	r1, r1, #11
 8000a20:	430a      	orrs	r2, r1
 8000a22:	615a      	str	r2, [r3, #20]
 8000a24:	4b20      	ldr	r3, [pc, #128]	; (8000aa8 <HAL_UART_MspInit+0xec>)
 8000a26:	695a      	ldr	r2, [r3, #20]
 8000a28:	2380      	movs	r3, #128	; 0x80
 8000a2a:	02db      	lsls	r3, r3, #11
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a32:	193b      	adds	r3, r7, r4
 8000a34:	2280      	movs	r2, #128	; 0x80
 8000a36:	00d2      	lsls	r2, r2, #3
 8000a38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	193b      	adds	r3, r7, r4
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	193b      	adds	r3, r7, r4
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a46:	193b      	adds	r3, r7, r4
 8000a48:	2203      	movs	r2, #3
 8000a4a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000a4c:	193b      	adds	r3, r7, r4
 8000a4e:	2201      	movs	r2, #1
 8000a50:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a52:	193a      	adds	r2, r7, r4
 8000a54:	2390      	movs	r3, #144	; 0x90
 8000a56:	05db      	lsls	r3, r3, #23
 8000a58:	0011      	movs	r1, r2
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f000 fa60 	bl	8000f20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a60:	0021      	movs	r1, r4
 8000a62:	187b      	adds	r3, r7, r1
 8000a64:	2240      	movs	r2, #64	; 0x40
 8000a66:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	2202      	movs	r2, #2
 8000a6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	187b      	adds	r3, r7, r1
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	2203      	movs	r2, #3
 8000a78:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000a7a:	187b      	adds	r3, r7, r1
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <HAL_UART_MspInit+0xf0>)
 8000a84:	0019      	movs	r1, r3
 8000a86:	0010      	movs	r0, r2
 8000a88:	f000 fa4a 	bl	8000f20 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2100      	movs	r1, #0
 8000a90:	201b      	movs	r0, #27
 8000a92:	f000 f995 	bl	8000dc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a96:	201b      	movs	r0, #27
 8000a98:	f000 f9a7 	bl	8000dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a9c:	46c0      	nop			; (mov r8, r8)
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	b00b      	add	sp, #44	; 0x2c
 8000aa2:	bd90      	pop	{r4, r7, pc}
 8000aa4:	40013800 	.word	0x40013800
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	48000400 	.word	0x48000400

08000ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <NMI_Handler+0x4>

08000ab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aba:	e7fe      	b.n	8000aba <HardFault_Handler+0x4>

08000abc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ac0:	46c0      	nop			; (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad4:	f000 f8ac 	bl	8000c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad8:	46c0      	nop			; (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ae4:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f001 fef4 	bl	80028d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000aec:	46c0      	nop			; (mov r8, r8)
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	200000cc 	.word	0x200000cc

08000af8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <TIM7_IRQHandler+0x14>)
 8000afe:	0018      	movs	r0, r3
 8000b00:	f001 fee8 	bl	80028d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000b04:	46c0      	nop			; (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	20000178 	.word	0x20000178

08000b10 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <SPI1_IRQHandler+0x14>)
 8000b16:	0018      	movs	r0, r3
 8000b18:	f001 fcc8 	bl	80024ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000b1c:	46c0      	nop			; (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	20000114 	.word	0x20000114

08000b28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <USART1_IRQHandler+0x14>)
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f002 f950 	bl	8002dd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b34:	46c0      	nop			; (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	20000028 	.word	0x20000028

08000b40 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b44:	46c0      	nop			; (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b4c:	480d      	ldr	r0, [pc, #52]	; (8000b84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b4e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b50:	480d      	ldr	r0, [pc, #52]	; (8000b88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b52:	490e      	ldr	r1, [pc, #56]	; (8000b8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b54:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <LoopForever+0xe>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b58:	e002      	b.n	8000b60 <LoopCopyDataInit>

08000b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5e:	3304      	adds	r3, #4

08000b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b64:	d3f9      	bcc.n	8000b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b66:	4a0b      	ldr	r2, [pc, #44]	; (8000b94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b68:	4c0b      	ldr	r4, [pc, #44]	; (8000b98 <LoopForever+0x16>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b6c:	e001      	b.n	8000b72 <LoopFillZerobss>

08000b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b70:	3204      	adds	r2, #4

08000b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b74:	d3fb      	bcc.n	8000b6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b76:	f7ff ffe3 	bl	8000b40 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000b7a:	f003 f813 	bl	8003ba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b7e:	f7ff fb4f 	bl	8000220 <main>

08000b82 <LoopForever>:

LoopForever:
    b LoopForever
 8000b82:	e7fe      	b.n	8000b82 <LoopForever>
  ldr   r0, =_estack
 8000b84:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b8c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b90:	08003c54 	.word	0x08003c54
  ldr r2, =_sbss
 8000b94:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b98:	200001c4 	.word	0x200001c4

08000b9c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b9c:	e7fe      	b.n	8000b9c <ADC1_COMP_IRQHandler>
	...

08000ba0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba4:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <HAL_Init+0x24>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_Init+0x24>)
 8000baa:	2110      	movs	r1, #16
 8000bac:	430a      	orrs	r2, r1
 8000bae:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000bb0:	2003      	movs	r0, #3
 8000bb2:	f000 f809 	bl	8000bc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb6:	f7ff fdcf 	bl	8000758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bba:	2300      	movs	r3, #0
}
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	40022000 	.word	0x40022000

08000bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc8:	b590      	push	{r4, r7, lr}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <HAL_InitTick+0x5c>)
 8000bd2:	681c      	ldr	r4, [r3, #0]
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <HAL_InitTick+0x60>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	0019      	movs	r1, r3
 8000bda:	23fa      	movs	r3, #250	; 0xfa
 8000bdc:	0098      	lsls	r0, r3, #2
 8000bde:	f7ff fa93 	bl	8000108 <__udivsi3>
 8000be2:	0003      	movs	r3, r0
 8000be4:	0019      	movs	r1, r3
 8000be6:	0020      	movs	r0, r4
 8000be8:	f7ff fa8e 	bl	8000108 <__udivsi3>
 8000bec:	0003      	movs	r3, r0
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f000 f90b 	bl	8000e0a <HAL_SYSTICK_Config>
 8000bf4:	1e03      	subs	r3, r0, #0
 8000bf6:	d001      	beq.n	8000bfc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e00f      	b.n	8000c1c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2b03      	cmp	r3, #3
 8000c00:	d80b      	bhi.n	8000c1a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	2301      	movs	r3, #1
 8000c06:	425b      	negs	r3, r3
 8000c08:	2200      	movs	r2, #0
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f000 f8d8 	bl	8000dc0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_InitTick+0x64>)
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000c16:	2300      	movs	r3, #0
 8000c18:	e000      	b.n	8000c1c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
}
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b003      	add	sp, #12
 8000c22:	bd90      	pop	{r4, r7, pc}
 8000c24:	20000000 	.word	0x20000000
 8000c28:	20000008 	.word	0x20000008
 8000c2c:	20000004 	.word	0x20000004

08000c30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <HAL_IncTick+0x1c>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	001a      	movs	r2, r3
 8000c3a:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <HAL_IncTick+0x20>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	18d2      	adds	r2, r2, r3
 8000c40:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <HAL_IncTick+0x20>)
 8000c42:	601a      	str	r2, [r3, #0]
}
 8000c44:	46c0      	nop			; (mov r8, r8)
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	200001c0 	.word	0x200001c0

08000c54 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  return uwTick;
 8000c58:	4b02      	ldr	r3, [pc, #8]	; (8000c64 <HAL_GetTick+0x10>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
}
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	200001c0 	.word	0x200001c0

08000c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	0002      	movs	r2, r0
 8000c70:	1dfb      	adds	r3, r7, #7
 8000c72:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c74:	1dfb      	adds	r3, r7, #7
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b7f      	cmp	r3, #127	; 0x7f
 8000c7a:	d809      	bhi.n	8000c90 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c7c:	1dfb      	adds	r3, r7, #7
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	001a      	movs	r2, r3
 8000c82:	231f      	movs	r3, #31
 8000c84:	401a      	ands	r2, r3
 8000c86:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <__NVIC_EnableIRQ+0x30>)
 8000c88:	2101      	movs	r1, #1
 8000c8a:	4091      	lsls	r1, r2
 8000c8c:	000a      	movs	r2, r1
 8000c8e:	601a      	str	r2, [r3, #0]
  }
}
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b002      	add	sp, #8
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	e000e100 	.word	0xe000e100

08000c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c9c:	b590      	push	{r4, r7, lr}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	0002      	movs	r2, r0
 8000ca4:	6039      	str	r1, [r7, #0]
 8000ca6:	1dfb      	adds	r3, r7, #7
 8000ca8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000caa:	1dfb      	adds	r3, r7, #7
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b7f      	cmp	r3, #127	; 0x7f
 8000cb0:	d828      	bhi.n	8000d04 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cb2:	4a2f      	ldr	r2, [pc, #188]	; (8000d70 <__NVIC_SetPriority+0xd4>)
 8000cb4:	1dfb      	adds	r3, r7, #7
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	b25b      	sxtb	r3, r3
 8000cba:	089b      	lsrs	r3, r3, #2
 8000cbc:	33c0      	adds	r3, #192	; 0xc0
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	589b      	ldr	r3, [r3, r2]
 8000cc2:	1dfa      	adds	r2, r7, #7
 8000cc4:	7812      	ldrb	r2, [r2, #0]
 8000cc6:	0011      	movs	r1, r2
 8000cc8:	2203      	movs	r2, #3
 8000cca:	400a      	ands	r2, r1
 8000ccc:	00d2      	lsls	r2, r2, #3
 8000cce:	21ff      	movs	r1, #255	; 0xff
 8000cd0:	4091      	lsls	r1, r2
 8000cd2:	000a      	movs	r2, r1
 8000cd4:	43d2      	mvns	r2, r2
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	019b      	lsls	r3, r3, #6
 8000cde:	22ff      	movs	r2, #255	; 0xff
 8000ce0:	401a      	ands	r2, r3
 8000ce2:	1dfb      	adds	r3, r7, #7
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	2303      	movs	r3, #3
 8000cea:	4003      	ands	r3, r0
 8000cec:	00db      	lsls	r3, r3, #3
 8000cee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cf0:	481f      	ldr	r0, [pc, #124]	; (8000d70 <__NVIC_SetPriority+0xd4>)
 8000cf2:	1dfb      	adds	r3, r7, #7
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	b25b      	sxtb	r3, r3
 8000cf8:	089b      	lsrs	r3, r3, #2
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	33c0      	adds	r3, #192	; 0xc0
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d02:	e031      	b.n	8000d68 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d04:	4a1b      	ldr	r2, [pc, #108]	; (8000d74 <__NVIC_SetPriority+0xd8>)
 8000d06:	1dfb      	adds	r3, r7, #7
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	0019      	movs	r1, r3
 8000d0c:	230f      	movs	r3, #15
 8000d0e:	400b      	ands	r3, r1
 8000d10:	3b08      	subs	r3, #8
 8000d12:	089b      	lsrs	r3, r3, #2
 8000d14:	3306      	adds	r3, #6
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	18d3      	adds	r3, r2, r3
 8000d1a:	3304      	adds	r3, #4
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	1dfa      	adds	r2, r7, #7
 8000d20:	7812      	ldrb	r2, [r2, #0]
 8000d22:	0011      	movs	r1, r2
 8000d24:	2203      	movs	r2, #3
 8000d26:	400a      	ands	r2, r1
 8000d28:	00d2      	lsls	r2, r2, #3
 8000d2a:	21ff      	movs	r1, #255	; 0xff
 8000d2c:	4091      	lsls	r1, r2
 8000d2e:	000a      	movs	r2, r1
 8000d30:	43d2      	mvns	r2, r2
 8000d32:	401a      	ands	r2, r3
 8000d34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	019b      	lsls	r3, r3, #6
 8000d3a:	22ff      	movs	r2, #255	; 0xff
 8000d3c:	401a      	ands	r2, r3
 8000d3e:	1dfb      	adds	r3, r7, #7
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	0018      	movs	r0, r3
 8000d44:	2303      	movs	r3, #3
 8000d46:	4003      	ands	r3, r0
 8000d48:	00db      	lsls	r3, r3, #3
 8000d4a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d4c:	4809      	ldr	r0, [pc, #36]	; (8000d74 <__NVIC_SetPriority+0xd8>)
 8000d4e:	1dfb      	adds	r3, r7, #7
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	001c      	movs	r4, r3
 8000d54:	230f      	movs	r3, #15
 8000d56:	4023      	ands	r3, r4
 8000d58:	3b08      	subs	r3, #8
 8000d5a:	089b      	lsrs	r3, r3, #2
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	3306      	adds	r3, #6
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	18c3      	adds	r3, r0, r3
 8000d64:	3304      	adds	r3, #4
 8000d66:	601a      	str	r2, [r3, #0]
}
 8000d68:	46c0      	nop			; (mov r8, r8)
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	b003      	add	sp, #12
 8000d6e:	bd90      	pop	{r4, r7, pc}
 8000d70:	e000e100 	.word	0xe000e100
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	1e5a      	subs	r2, r3, #1
 8000d84:	2380      	movs	r3, #128	; 0x80
 8000d86:	045b      	lsls	r3, r3, #17
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d301      	bcc.n	8000d90 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e010      	b.n	8000db2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d90:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <SysTick_Config+0x44>)
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	3a01      	subs	r2, #1
 8000d96:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d98:	2301      	movs	r3, #1
 8000d9a:	425b      	negs	r3, r3
 8000d9c:	2103      	movs	r1, #3
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f7ff ff7c 	bl	8000c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <SysTick_Config+0x44>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000daa:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <SysTick_Config+0x44>)
 8000dac:	2207      	movs	r2, #7
 8000dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	0018      	movs	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	b002      	add	sp, #8
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	e000e010 	.word	0xe000e010

08000dc0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60b9      	str	r1, [r7, #8]
 8000dc8:	607a      	str	r2, [r7, #4]
 8000dca:	210f      	movs	r1, #15
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	1c02      	adds	r2, r0, #0
 8000dd0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	b25b      	sxtb	r3, r3
 8000dda:	0011      	movs	r1, r2
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f7ff ff5d 	bl	8000c9c <__NVIC_SetPriority>
}
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	46bd      	mov	sp, r7
 8000de6:	b004      	add	sp, #16
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	0002      	movs	r2, r0
 8000df2:	1dfb      	adds	r3, r7, #7
 8000df4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df6:	1dfb      	adds	r3, r7, #7
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	b25b      	sxtb	r3, r3
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f7ff ff33 	bl	8000c68 <__NVIC_EnableIRQ>
}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	46bd      	mov	sp, r7
 8000e06:	b002      	add	sp, #8
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	0018      	movs	r0, r3
 8000e16:	f7ff ffaf 	bl	8000d78 <SysTick_Config>
 8000e1a:	0003      	movs	r3, r0
}
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	b002      	add	sp, #8
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2221      	movs	r2, #33	; 0x21
 8000e30:	5c9b      	ldrb	r3, [r3, r2]
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d008      	beq.n	8000e4a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2204      	movs	r2, #4
 8000e3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2220      	movs	r2, #32
 8000e42:	2100      	movs	r1, #0
 8000e44:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e020      	b.n	8000e8c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	210e      	movs	r1, #14
 8000e56:	438a      	bics	r2, r1
 8000e58:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2101      	movs	r1, #1
 8000e66:	438a      	bics	r2, r1
 8000e68:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e72:	2101      	movs	r1, #1
 8000e74:	4091      	lsls	r1, r2
 8000e76:	000a      	movs	r2, r1
 8000e78:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2221      	movs	r2, #33	; 0x21
 8000e7e:	2101      	movs	r1, #1
 8000e80:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2220      	movs	r2, #32
 8000e86:	2100      	movs	r1, #0
 8000e88:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
}
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b002      	add	sp, #8
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e9c:	210f      	movs	r1, #15
 8000e9e:	187b      	adds	r3, r7, r1
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2221      	movs	r2, #33	; 0x21
 8000ea8:	5c9b      	ldrb	r3, [r3, r2]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d006      	beq.n	8000ebe <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2204      	movs	r2, #4
 8000eb4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000eb6:	187b      	adds	r3, r7, r1
 8000eb8:	2201      	movs	r2, #1
 8000eba:	701a      	strb	r2, [r3, #0]
 8000ebc:	e028      	b.n	8000f10 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	210e      	movs	r1, #14
 8000eca:	438a      	bics	r2, r1
 8000ecc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2101      	movs	r1, #1
 8000eda:	438a      	bics	r2, r1
 8000edc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	4091      	lsls	r1, r2
 8000eea:	000a      	movs	r2, r1
 8000eec:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2221      	movs	r2, #33	; 0x21
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2220      	movs	r2, #32
 8000efa:	2100      	movs	r1, #0
 8000efc:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d004      	beq.n	8000f10 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	0010      	movs	r0, r2
 8000f0e:	4798      	blx	r3
    } 
  }
  return status;
 8000f10:	230f      	movs	r3, #15
 8000f12:	18fb      	adds	r3, r7, r3
 8000f14:	781b      	ldrb	r3, [r3, #0]
}
 8000f16:	0018      	movs	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b004      	add	sp, #16
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f2e:	e155      	b.n	80011dc <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2101      	movs	r1, #1
 8000f36:	697a      	ldr	r2, [r7, #20]
 8000f38:	4091      	lsls	r1, r2
 8000f3a:	000a      	movs	r2, r1
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d100      	bne.n	8000f48 <HAL_GPIO_Init+0x28>
 8000f46:	e146      	b.n	80011d6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	4013      	ands	r3, r2
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d005      	beq.n	8000f60 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	2203      	movs	r2, #3
 8000f5a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d130      	bne.n	8000fc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	409a      	lsls	r2, r3
 8000f6e:	0013      	movs	r3, r2
 8000f70:	43da      	mvns	r2, r3
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	4013      	ands	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	68da      	ldr	r2, [r3, #12]
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	409a      	lsls	r2, r3
 8000f82:	0013      	movs	r3, r2
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f96:	2201      	movs	r2, #1
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	409a      	lsls	r2, r3
 8000f9c:	0013      	movs	r3, r2
 8000f9e:	43da      	mvns	r2, r3
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	091b      	lsrs	r3, r3, #4
 8000fac:	2201      	movs	r2, #1
 8000fae:	401a      	ands	r2, r3
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	409a      	lsls	r2, r3
 8000fb4:	0013      	movs	r3, r2
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	4013      	ands	r3, r2
 8000fca:	2b03      	cmp	r3, #3
 8000fcc:	d017      	beq.n	8000ffe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	2203      	movs	r2, #3
 8000fda:	409a      	lsls	r2, r3
 8000fdc:	0013      	movs	r3, r2
 8000fde:	43da      	mvns	r2, r3
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	409a      	lsls	r2, r3
 8000ff0:	0013      	movs	r3, r2
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	2203      	movs	r2, #3
 8001004:	4013      	ands	r3, r2
 8001006:	2b02      	cmp	r3, #2
 8001008:	d123      	bne.n	8001052 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	08da      	lsrs	r2, r3, #3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3208      	adds	r2, #8
 8001012:	0092      	lsls	r2, r2, #2
 8001014:	58d3      	ldr	r3, [r2, r3]
 8001016:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	2207      	movs	r2, #7
 800101c:	4013      	ands	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	220f      	movs	r2, #15
 8001022:	409a      	lsls	r2, r3
 8001024:	0013      	movs	r3, r2
 8001026:	43da      	mvns	r2, r3
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	4013      	ands	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	691a      	ldr	r2, [r3, #16]
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	2107      	movs	r1, #7
 8001036:	400b      	ands	r3, r1
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	409a      	lsls	r2, r3
 800103c:	0013      	movs	r3, r2
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4313      	orrs	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	08da      	lsrs	r2, r3, #3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3208      	adds	r2, #8
 800104c:	0092      	lsls	r2, r2, #2
 800104e:	6939      	ldr	r1, [r7, #16]
 8001050:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	2203      	movs	r2, #3
 800105e:	409a      	lsls	r2, r3
 8001060:	0013      	movs	r3, r2
 8001062:	43da      	mvns	r2, r3
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	2203      	movs	r2, #3
 8001070:	401a      	ands	r2, r3
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	409a      	lsls	r2, r3
 8001078:	0013      	movs	r3, r2
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	23c0      	movs	r3, #192	; 0xc0
 800108c:	029b      	lsls	r3, r3, #10
 800108e:	4013      	ands	r3, r2
 8001090:	d100      	bne.n	8001094 <HAL_GPIO_Init+0x174>
 8001092:	e0a0      	b.n	80011d6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001094:	4b57      	ldr	r3, [pc, #348]	; (80011f4 <HAL_GPIO_Init+0x2d4>)
 8001096:	699a      	ldr	r2, [r3, #24]
 8001098:	4b56      	ldr	r3, [pc, #344]	; (80011f4 <HAL_GPIO_Init+0x2d4>)
 800109a:	2101      	movs	r1, #1
 800109c:	430a      	orrs	r2, r1
 800109e:	619a      	str	r2, [r3, #24]
 80010a0:	4b54      	ldr	r3, [pc, #336]	; (80011f4 <HAL_GPIO_Init+0x2d4>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	2201      	movs	r2, #1
 80010a6:	4013      	ands	r3, r2
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010ac:	4a52      	ldr	r2, [pc, #328]	; (80011f8 <HAL_GPIO_Init+0x2d8>)
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	089b      	lsrs	r3, r3, #2
 80010b2:	3302      	adds	r3, #2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	589b      	ldr	r3, [r3, r2]
 80010b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	2203      	movs	r2, #3
 80010be:	4013      	ands	r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	220f      	movs	r2, #15
 80010c4:	409a      	lsls	r2, r3
 80010c6:	0013      	movs	r3, r2
 80010c8:	43da      	mvns	r2, r3
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	2390      	movs	r3, #144	; 0x90
 80010d4:	05db      	lsls	r3, r3, #23
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d019      	beq.n	800110e <HAL_GPIO_Init+0x1ee>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a47      	ldr	r2, [pc, #284]	; (80011fc <HAL_GPIO_Init+0x2dc>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d013      	beq.n	800110a <HAL_GPIO_Init+0x1ea>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a46      	ldr	r2, [pc, #280]	; (8001200 <HAL_GPIO_Init+0x2e0>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d00d      	beq.n	8001106 <HAL_GPIO_Init+0x1e6>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a45      	ldr	r2, [pc, #276]	; (8001204 <HAL_GPIO_Init+0x2e4>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d007      	beq.n	8001102 <HAL_GPIO_Init+0x1e2>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a44      	ldr	r2, [pc, #272]	; (8001208 <HAL_GPIO_Init+0x2e8>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d101      	bne.n	80010fe <HAL_GPIO_Init+0x1de>
 80010fa:	2304      	movs	r3, #4
 80010fc:	e008      	b.n	8001110 <HAL_GPIO_Init+0x1f0>
 80010fe:	2305      	movs	r3, #5
 8001100:	e006      	b.n	8001110 <HAL_GPIO_Init+0x1f0>
 8001102:	2303      	movs	r3, #3
 8001104:	e004      	b.n	8001110 <HAL_GPIO_Init+0x1f0>
 8001106:	2302      	movs	r3, #2
 8001108:	e002      	b.n	8001110 <HAL_GPIO_Init+0x1f0>
 800110a:	2301      	movs	r3, #1
 800110c:	e000      	b.n	8001110 <HAL_GPIO_Init+0x1f0>
 800110e:	2300      	movs	r3, #0
 8001110:	697a      	ldr	r2, [r7, #20]
 8001112:	2103      	movs	r1, #3
 8001114:	400a      	ands	r2, r1
 8001116:	0092      	lsls	r2, r2, #2
 8001118:	4093      	lsls	r3, r2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001120:	4935      	ldr	r1, [pc, #212]	; (80011f8 <HAL_GPIO_Init+0x2d8>)
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	089b      	lsrs	r3, r3, #2
 8001126:	3302      	adds	r3, #2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800112e:	4b37      	ldr	r3, [pc, #220]	; (800120c <HAL_GPIO_Init+0x2ec>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	43da      	mvns	r2, r3
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	2380      	movs	r3, #128	; 0x80
 8001144:	025b      	lsls	r3, r3, #9
 8001146:	4013      	ands	r3, r2
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4313      	orrs	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001152:	4b2e      	ldr	r3, [pc, #184]	; (800120c <HAL_GPIO_Init+0x2ec>)
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001158:	4b2c      	ldr	r3, [pc, #176]	; (800120c <HAL_GPIO_Init+0x2ec>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	43da      	mvns	r2, r3
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	2380      	movs	r3, #128	; 0x80
 800116e:	029b      	lsls	r3, r3, #10
 8001170:	4013      	ands	r3, r2
 8001172:	d003      	beq.n	800117c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800117c:	4b23      	ldr	r3, [pc, #140]	; (800120c <HAL_GPIO_Init+0x2ec>)
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001182:	4b22      	ldr	r3, [pc, #136]	; (800120c <HAL_GPIO_Init+0x2ec>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	43da      	mvns	r2, r3
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685a      	ldr	r2, [r3, #4]
 8001196:	2380      	movs	r3, #128	; 0x80
 8001198:	035b      	lsls	r3, r3, #13
 800119a:	4013      	ands	r3, r2
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011a6:	4b19      	ldr	r3, [pc, #100]	; (800120c <HAL_GPIO_Init+0x2ec>)
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80011ac:	4b17      	ldr	r3, [pc, #92]	; (800120c <HAL_GPIO_Init+0x2ec>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	43da      	mvns	r2, r3
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	2380      	movs	r3, #128	; 0x80
 80011c2:	039b      	lsls	r3, r3, #14
 80011c4:	4013      	ands	r3, r2
 80011c6:	d003      	beq.n	80011d0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <HAL_GPIO_Init+0x2ec>)
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	3301      	adds	r3, #1
 80011da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	40da      	lsrs	r2, r3
 80011e4:	1e13      	subs	r3, r2, #0
 80011e6:	d000      	beq.n	80011ea <HAL_GPIO_Init+0x2ca>
 80011e8:	e6a2      	b.n	8000f30 <HAL_GPIO_Init+0x10>
  } 
}
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	46c0      	nop			; (mov r8, r8)
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b006      	add	sp, #24
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40010000 	.word	0x40010000
 80011fc:	48000400 	.word	0x48000400
 8001200:	48000800 	.word	0x48000800
 8001204:	48000c00 	.word	0x48000c00
 8001208:	48001000 	.word	0x48001000
 800120c:	40010400 	.word	0x40010400

08001210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	0008      	movs	r0, r1
 800121a:	0011      	movs	r1, r2
 800121c:	1cbb      	adds	r3, r7, #2
 800121e:	1c02      	adds	r2, r0, #0
 8001220:	801a      	strh	r2, [r3, #0]
 8001222:	1c7b      	adds	r3, r7, #1
 8001224:	1c0a      	adds	r2, r1, #0
 8001226:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001228:	1c7b      	adds	r3, r7, #1
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d004      	beq.n	800123a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001230:	1cbb      	adds	r3, r7, #2
 8001232:	881a      	ldrh	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001238:	e003      	b.n	8001242 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800123a:	1cbb      	adds	r3, r7, #2
 800123c:	881a      	ldrh	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	46bd      	mov	sp, r7
 8001246:	b002      	add	sp, #8
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 8001250:	4b04      	ldr	r3, [pc, #16]	; (8001264 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b03      	ldr	r3, [pc, #12]	; (8001264 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001256:	2180      	movs	r1, #128	; 0x80
 8001258:	0049      	lsls	r1, r1, #1
 800125a:	430a      	orrs	r2, r1
 800125c:	601a      	str	r2, [r3, #0]
}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40007000 	.word	0x40007000

08001268 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d102      	bne.n	800127c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	f000 fb76 	bl	8001968 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2201      	movs	r2, #1
 8001282:	4013      	ands	r3, r2
 8001284:	d100      	bne.n	8001288 <HAL_RCC_OscConfig+0x20>
 8001286:	e08e      	b.n	80013a6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001288:	4bc5      	ldr	r3, [pc, #788]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	220c      	movs	r2, #12
 800128e:	4013      	ands	r3, r2
 8001290:	2b04      	cmp	r3, #4
 8001292:	d00e      	beq.n	80012b2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001294:	4bc2      	ldr	r3, [pc, #776]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	220c      	movs	r2, #12
 800129a:	4013      	ands	r3, r2
 800129c:	2b08      	cmp	r3, #8
 800129e:	d117      	bne.n	80012d0 <HAL_RCC_OscConfig+0x68>
 80012a0:	4bbf      	ldr	r3, [pc, #764]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	23c0      	movs	r3, #192	; 0xc0
 80012a6:	025b      	lsls	r3, r3, #9
 80012a8:	401a      	ands	r2, r3
 80012aa:	2380      	movs	r3, #128	; 0x80
 80012ac:	025b      	lsls	r3, r3, #9
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d10e      	bne.n	80012d0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b2:	4bbb      	ldr	r3, [pc, #748]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	2380      	movs	r3, #128	; 0x80
 80012b8:	029b      	lsls	r3, r3, #10
 80012ba:	4013      	ands	r3, r2
 80012bc:	d100      	bne.n	80012c0 <HAL_RCC_OscConfig+0x58>
 80012be:	e071      	b.n	80013a4 <HAL_RCC_OscConfig+0x13c>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d000      	beq.n	80012ca <HAL_RCC_OscConfig+0x62>
 80012c8:	e06c      	b.n	80013a4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	f000 fb4c 	bl	8001968 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d107      	bne.n	80012e8 <HAL_RCC_OscConfig+0x80>
 80012d8:	4bb1      	ldr	r3, [pc, #708]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4bb0      	ldr	r3, [pc, #704]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 80012de:	2180      	movs	r1, #128	; 0x80
 80012e0:	0249      	lsls	r1, r1, #9
 80012e2:	430a      	orrs	r2, r1
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	e02f      	b.n	8001348 <HAL_RCC_OscConfig+0xe0>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d10c      	bne.n	800130a <HAL_RCC_OscConfig+0xa2>
 80012f0:	4bab      	ldr	r3, [pc, #684]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4baa      	ldr	r3, [pc, #680]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 80012f6:	49ab      	ldr	r1, [pc, #684]	; (80015a4 <HAL_RCC_OscConfig+0x33c>)
 80012f8:	400a      	ands	r2, r1
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	4ba8      	ldr	r3, [pc, #672]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4ba7      	ldr	r3, [pc, #668]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 8001302:	49a9      	ldr	r1, [pc, #676]	; (80015a8 <HAL_RCC_OscConfig+0x340>)
 8001304:	400a      	ands	r2, r1
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	e01e      	b.n	8001348 <HAL_RCC_OscConfig+0xe0>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b05      	cmp	r3, #5
 8001310:	d10e      	bne.n	8001330 <HAL_RCC_OscConfig+0xc8>
 8001312:	4ba3      	ldr	r3, [pc, #652]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	4ba2      	ldr	r3, [pc, #648]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 8001318:	2180      	movs	r1, #128	; 0x80
 800131a:	02c9      	lsls	r1, r1, #11
 800131c:	430a      	orrs	r2, r1
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	4b9f      	ldr	r3, [pc, #636]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4b9e      	ldr	r3, [pc, #632]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 8001326:	2180      	movs	r1, #128	; 0x80
 8001328:	0249      	lsls	r1, r1, #9
 800132a:	430a      	orrs	r2, r1
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	e00b      	b.n	8001348 <HAL_RCC_OscConfig+0xe0>
 8001330:	4b9b      	ldr	r3, [pc, #620]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b9a      	ldr	r3, [pc, #616]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 8001336:	499b      	ldr	r1, [pc, #620]	; (80015a4 <HAL_RCC_OscConfig+0x33c>)
 8001338:	400a      	ands	r2, r1
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	4b98      	ldr	r3, [pc, #608]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4b97      	ldr	r3, [pc, #604]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 8001342:	4999      	ldr	r1, [pc, #612]	; (80015a8 <HAL_RCC_OscConfig+0x340>)
 8001344:	400a      	ands	r2, r1
 8001346:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d014      	beq.n	800137a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001350:	f7ff fc80 	bl	8000c54 <HAL_GetTick>
 8001354:	0003      	movs	r3, r0
 8001356:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800135a:	f7ff fc7b 	bl	8000c54 <HAL_GetTick>
 800135e:	0002      	movs	r2, r0
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b64      	cmp	r3, #100	; 0x64
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e2fd      	b.n	8001968 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136c:	4b8c      	ldr	r3, [pc, #560]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	2380      	movs	r3, #128	; 0x80
 8001372:	029b      	lsls	r3, r3, #10
 8001374:	4013      	ands	r3, r2
 8001376:	d0f0      	beq.n	800135a <HAL_RCC_OscConfig+0xf2>
 8001378:	e015      	b.n	80013a6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137a:	f7ff fc6b 	bl	8000c54 <HAL_GetTick>
 800137e:	0003      	movs	r3, r0
 8001380:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001384:	f7ff fc66 	bl	8000c54 <HAL_GetTick>
 8001388:	0002      	movs	r2, r0
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b64      	cmp	r3, #100	; 0x64
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e2e8      	b.n	8001968 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001396:	4b82      	ldr	r3, [pc, #520]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	2380      	movs	r3, #128	; 0x80
 800139c:	029b      	lsls	r3, r3, #10
 800139e:	4013      	ands	r3, r2
 80013a0:	d1f0      	bne.n	8001384 <HAL_RCC_OscConfig+0x11c>
 80013a2:	e000      	b.n	80013a6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2202      	movs	r2, #2
 80013ac:	4013      	ands	r3, r2
 80013ae:	d100      	bne.n	80013b2 <HAL_RCC_OscConfig+0x14a>
 80013b0:	e06c      	b.n	800148c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013b2:	4b7b      	ldr	r3, [pc, #492]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	220c      	movs	r2, #12
 80013b8:	4013      	ands	r3, r2
 80013ba:	d00e      	beq.n	80013da <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013bc:	4b78      	ldr	r3, [pc, #480]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	220c      	movs	r2, #12
 80013c2:	4013      	ands	r3, r2
 80013c4:	2b08      	cmp	r3, #8
 80013c6:	d11f      	bne.n	8001408 <HAL_RCC_OscConfig+0x1a0>
 80013c8:	4b75      	ldr	r3, [pc, #468]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	23c0      	movs	r3, #192	; 0xc0
 80013ce:	025b      	lsls	r3, r3, #9
 80013d0:	401a      	ands	r2, r3
 80013d2:	2380      	movs	r3, #128	; 0x80
 80013d4:	021b      	lsls	r3, r3, #8
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d116      	bne.n	8001408 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013da:	4b71      	ldr	r3, [pc, #452]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2202      	movs	r2, #2
 80013e0:	4013      	ands	r3, r2
 80013e2:	d005      	beq.n	80013f0 <HAL_RCC_OscConfig+0x188>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d001      	beq.n	80013f0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e2bb      	b.n	8001968 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f0:	4b6b      	ldr	r3, [pc, #428]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	22f8      	movs	r2, #248	; 0xf8
 80013f6:	4393      	bics	r3, r2
 80013f8:	0019      	movs	r1, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	00da      	lsls	r2, r3, #3
 8001400:	4b67      	ldr	r3, [pc, #412]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 8001402:	430a      	orrs	r2, r1
 8001404:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001406:	e041      	b.n	800148c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d024      	beq.n	800145a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001410:	4b63      	ldr	r3, [pc, #396]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b62      	ldr	r3, [pc, #392]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 8001416:	2101      	movs	r1, #1
 8001418:	430a      	orrs	r2, r1
 800141a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141c:	f7ff fc1a 	bl	8000c54 <HAL_GetTick>
 8001420:	0003      	movs	r3, r0
 8001422:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001426:	f7ff fc15 	bl	8000c54 <HAL_GetTick>
 800142a:	0002      	movs	r2, r0
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e297      	b.n	8001968 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001438:	4b59      	ldr	r3, [pc, #356]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2202      	movs	r2, #2
 800143e:	4013      	ands	r3, r2
 8001440:	d0f1      	beq.n	8001426 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001442:	4b57      	ldr	r3, [pc, #348]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	22f8      	movs	r2, #248	; 0xf8
 8001448:	4393      	bics	r3, r2
 800144a:	0019      	movs	r1, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	00da      	lsls	r2, r3, #3
 8001452:	4b53      	ldr	r3, [pc, #332]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 8001454:	430a      	orrs	r2, r1
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	e018      	b.n	800148c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800145a:	4b51      	ldr	r3, [pc, #324]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	4b50      	ldr	r3, [pc, #320]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 8001460:	2101      	movs	r1, #1
 8001462:	438a      	bics	r2, r1
 8001464:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001466:	f7ff fbf5 	bl	8000c54 <HAL_GetTick>
 800146a:	0003      	movs	r3, r0
 800146c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001470:	f7ff fbf0 	bl	8000c54 <HAL_GetTick>
 8001474:	0002      	movs	r2, r0
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e272      	b.n	8001968 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001482:	4b47      	ldr	r3, [pc, #284]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2202      	movs	r2, #2
 8001488:	4013      	ands	r3, r2
 800148a:	d1f1      	bne.n	8001470 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2208      	movs	r2, #8
 8001492:	4013      	ands	r3, r2
 8001494:	d036      	beq.n	8001504 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d019      	beq.n	80014d2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800149e:	4b40      	ldr	r3, [pc, #256]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 80014a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014a2:	4b3f      	ldr	r3, [pc, #252]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 80014a4:	2101      	movs	r1, #1
 80014a6:	430a      	orrs	r2, r1
 80014a8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014aa:	f7ff fbd3 	bl	8000c54 <HAL_GetTick>
 80014ae:	0003      	movs	r3, r0
 80014b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b4:	f7ff fbce 	bl	8000c54 <HAL_GetTick>
 80014b8:	0002      	movs	r2, r0
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e250      	b.n	8001968 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c6:	4b36      	ldr	r3, [pc, #216]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 80014c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ca:	2202      	movs	r2, #2
 80014cc:	4013      	ands	r3, r2
 80014ce:	d0f1      	beq.n	80014b4 <HAL_RCC_OscConfig+0x24c>
 80014d0:	e018      	b.n	8001504 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014d2:	4b33      	ldr	r3, [pc, #204]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 80014d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014d6:	4b32      	ldr	r3, [pc, #200]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 80014d8:	2101      	movs	r1, #1
 80014da:	438a      	bics	r2, r1
 80014dc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014de:	f7ff fbb9 	bl	8000c54 <HAL_GetTick>
 80014e2:	0003      	movs	r3, r0
 80014e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014e8:	f7ff fbb4 	bl	8000c54 <HAL_GetTick>
 80014ec:	0002      	movs	r2, r0
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e236      	b.n	8001968 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014fa:	4b29      	ldr	r3, [pc, #164]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 80014fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fe:	2202      	movs	r2, #2
 8001500:	4013      	ands	r3, r2
 8001502:	d1f1      	bne.n	80014e8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2204      	movs	r2, #4
 800150a:	4013      	ands	r3, r2
 800150c:	d100      	bne.n	8001510 <HAL_RCC_OscConfig+0x2a8>
 800150e:	e0b5      	b.n	800167c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001510:	201f      	movs	r0, #31
 8001512:	183b      	adds	r3, r7, r0
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001518:	4b21      	ldr	r3, [pc, #132]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 800151a:	69da      	ldr	r2, [r3, #28]
 800151c:	2380      	movs	r3, #128	; 0x80
 800151e:	055b      	lsls	r3, r3, #21
 8001520:	4013      	ands	r3, r2
 8001522:	d110      	bne.n	8001546 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001524:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 8001526:	69da      	ldr	r2, [r3, #28]
 8001528:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 800152a:	2180      	movs	r1, #128	; 0x80
 800152c:	0549      	lsls	r1, r1, #21
 800152e:	430a      	orrs	r2, r1
 8001530:	61da      	str	r2, [r3, #28]
 8001532:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 8001534:	69da      	ldr	r2, [r3, #28]
 8001536:	2380      	movs	r3, #128	; 0x80
 8001538:	055b      	lsls	r3, r3, #21
 800153a:	4013      	ands	r3, r2
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001540:	183b      	adds	r3, r7, r0
 8001542:	2201      	movs	r2, #1
 8001544:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001546:	4b19      	ldr	r3, [pc, #100]	; (80015ac <HAL_RCC_OscConfig+0x344>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	2380      	movs	r3, #128	; 0x80
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	4013      	ands	r3, r2
 8001550:	d11a      	bne.n	8001588 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001552:	4b16      	ldr	r3, [pc, #88]	; (80015ac <HAL_RCC_OscConfig+0x344>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <HAL_RCC_OscConfig+0x344>)
 8001558:	2180      	movs	r1, #128	; 0x80
 800155a:	0049      	lsls	r1, r1, #1
 800155c:	430a      	orrs	r2, r1
 800155e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001560:	f7ff fb78 	bl	8000c54 <HAL_GetTick>
 8001564:	0003      	movs	r3, r0
 8001566:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800156a:	f7ff fb73 	bl	8000c54 <HAL_GetTick>
 800156e:	0002      	movs	r2, r0
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b64      	cmp	r3, #100	; 0x64
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e1f5      	b.n	8001968 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157c:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_RCC_OscConfig+0x344>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	4013      	ands	r3, r2
 8001586:	d0f0      	beq.n	800156a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d10f      	bne.n	80015b0 <HAL_RCC_OscConfig+0x348>
 8001590:	4b03      	ldr	r3, [pc, #12]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 8001592:	6a1a      	ldr	r2, [r3, #32]
 8001594:	4b02      	ldr	r3, [pc, #8]	; (80015a0 <HAL_RCC_OscConfig+0x338>)
 8001596:	2101      	movs	r1, #1
 8001598:	430a      	orrs	r2, r1
 800159a:	621a      	str	r2, [r3, #32]
 800159c:	e036      	b.n	800160c <HAL_RCC_OscConfig+0x3a4>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	40021000 	.word	0x40021000
 80015a4:	fffeffff 	.word	0xfffeffff
 80015a8:	fffbffff 	.word	0xfffbffff
 80015ac:	40007000 	.word	0x40007000
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d10c      	bne.n	80015d2 <HAL_RCC_OscConfig+0x36a>
 80015b8:	4bca      	ldr	r3, [pc, #808]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 80015ba:	6a1a      	ldr	r2, [r3, #32]
 80015bc:	4bc9      	ldr	r3, [pc, #804]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 80015be:	2101      	movs	r1, #1
 80015c0:	438a      	bics	r2, r1
 80015c2:	621a      	str	r2, [r3, #32]
 80015c4:	4bc7      	ldr	r3, [pc, #796]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 80015c6:	6a1a      	ldr	r2, [r3, #32]
 80015c8:	4bc6      	ldr	r3, [pc, #792]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 80015ca:	2104      	movs	r1, #4
 80015cc:	438a      	bics	r2, r1
 80015ce:	621a      	str	r2, [r3, #32]
 80015d0:	e01c      	b.n	800160c <HAL_RCC_OscConfig+0x3a4>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	2b05      	cmp	r3, #5
 80015d8:	d10c      	bne.n	80015f4 <HAL_RCC_OscConfig+0x38c>
 80015da:	4bc2      	ldr	r3, [pc, #776]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 80015dc:	6a1a      	ldr	r2, [r3, #32]
 80015de:	4bc1      	ldr	r3, [pc, #772]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 80015e0:	2104      	movs	r1, #4
 80015e2:	430a      	orrs	r2, r1
 80015e4:	621a      	str	r2, [r3, #32]
 80015e6:	4bbf      	ldr	r3, [pc, #764]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 80015e8:	6a1a      	ldr	r2, [r3, #32]
 80015ea:	4bbe      	ldr	r3, [pc, #760]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 80015ec:	2101      	movs	r1, #1
 80015ee:	430a      	orrs	r2, r1
 80015f0:	621a      	str	r2, [r3, #32]
 80015f2:	e00b      	b.n	800160c <HAL_RCC_OscConfig+0x3a4>
 80015f4:	4bbb      	ldr	r3, [pc, #748]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 80015f6:	6a1a      	ldr	r2, [r3, #32]
 80015f8:	4bba      	ldr	r3, [pc, #744]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 80015fa:	2101      	movs	r1, #1
 80015fc:	438a      	bics	r2, r1
 80015fe:	621a      	str	r2, [r3, #32]
 8001600:	4bb8      	ldr	r3, [pc, #736]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 8001602:	6a1a      	ldr	r2, [r3, #32]
 8001604:	4bb7      	ldr	r3, [pc, #732]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 8001606:	2104      	movs	r1, #4
 8001608:	438a      	bics	r2, r1
 800160a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d014      	beq.n	800163e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001614:	f7ff fb1e 	bl	8000c54 <HAL_GetTick>
 8001618:	0003      	movs	r3, r0
 800161a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800161c:	e009      	b.n	8001632 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800161e:	f7ff fb19 	bl	8000c54 <HAL_GetTick>
 8001622:	0002      	movs	r2, r0
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	4aaf      	ldr	r2, [pc, #700]	; (80018e8 <HAL_RCC_OscConfig+0x680>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e19a      	b.n	8001968 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001632:	4bac      	ldr	r3, [pc, #688]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	2202      	movs	r2, #2
 8001638:	4013      	ands	r3, r2
 800163a:	d0f0      	beq.n	800161e <HAL_RCC_OscConfig+0x3b6>
 800163c:	e013      	b.n	8001666 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163e:	f7ff fb09 	bl	8000c54 <HAL_GetTick>
 8001642:	0003      	movs	r3, r0
 8001644:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001646:	e009      	b.n	800165c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001648:	f7ff fb04 	bl	8000c54 <HAL_GetTick>
 800164c:	0002      	movs	r2, r0
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	4aa5      	ldr	r2, [pc, #660]	; (80018e8 <HAL_RCC_OscConfig+0x680>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e185      	b.n	8001968 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800165c:	4ba1      	ldr	r3, [pc, #644]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	2202      	movs	r2, #2
 8001662:	4013      	ands	r3, r2
 8001664:	d1f0      	bne.n	8001648 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001666:	231f      	movs	r3, #31
 8001668:	18fb      	adds	r3, r7, r3
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d105      	bne.n	800167c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001670:	4b9c      	ldr	r3, [pc, #624]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 8001672:	69da      	ldr	r2, [r3, #28]
 8001674:	4b9b      	ldr	r3, [pc, #620]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 8001676:	499d      	ldr	r1, [pc, #628]	; (80018ec <HAL_RCC_OscConfig+0x684>)
 8001678:	400a      	ands	r2, r1
 800167a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2210      	movs	r2, #16
 8001682:	4013      	ands	r3, r2
 8001684:	d063      	beq.n	800174e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d12a      	bne.n	80016e4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800168e:	4b95      	ldr	r3, [pc, #596]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 8001690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001692:	4b94      	ldr	r3, [pc, #592]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 8001694:	2104      	movs	r1, #4
 8001696:	430a      	orrs	r2, r1
 8001698:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800169a:	4b92      	ldr	r3, [pc, #584]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 800169c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800169e:	4b91      	ldr	r3, [pc, #580]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 80016a0:	2101      	movs	r1, #1
 80016a2:	430a      	orrs	r2, r1
 80016a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a6:	f7ff fad5 	bl	8000c54 <HAL_GetTick>
 80016aa:	0003      	movs	r3, r0
 80016ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80016b0:	f7ff fad0 	bl	8000c54 <HAL_GetTick>
 80016b4:	0002      	movs	r2, r0
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e152      	b.n	8001968 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80016c2:	4b88      	ldr	r3, [pc, #544]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 80016c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016c6:	2202      	movs	r2, #2
 80016c8:	4013      	ands	r3, r2
 80016ca:	d0f1      	beq.n	80016b0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80016cc:	4b85      	ldr	r3, [pc, #532]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 80016ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d0:	22f8      	movs	r2, #248	; 0xf8
 80016d2:	4393      	bics	r3, r2
 80016d4:	0019      	movs	r1, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	00da      	lsls	r2, r3, #3
 80016dc:	4b81      	ldr	r3, [pc, #516]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 80016de:	430a      	orrs	r2, r1
 80016e0:	635a      	str	r2, [r3, #52]	; 0x34
 80016e2:	e034      	b.n	800174e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	695b      	ldr	r3, [r3, #20]
 80016e8:	3305      	adds	r3, #5
 80016ea:	d111      	bne.n	8001710 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80016ec:	4b7d      	ldr	r3, [pc, #500]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 80016ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016f0:	4b7c      	ldr	r3, [pc, #496]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 80016f2:	2104      	movs	r1, #4
 80016f4:	438a      	bics	r2, r1
 80016f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80016f8:	4b7a      	ldr	r3, [pc, #488]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 80016fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016fc:	22f8      	movs	r2, #248	; 0xf8
 80016fe:	4393      	bics	r3, r2
 8001700:	0019      	movs	r1, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	00da      	lsls	r2, r3, #3
 8001708:	4b76      	ldr	r3, [pc, #472]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 800170a:	430a      	orrs	r2, r1
 800170c:	635a      	str	r2, [r3, #52]	; 0x34
 800170e:	e01e      	b.n	800174e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001710:	4b74      	ldr	r3, [pc, #464]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 8001712:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001714:	4b73      	ldr	r3, [pc, #460]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 8001716:	2104      	movs	r1, #4
 8001718:	430a      	orrs	r2, r1
 800171a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800171c:	4b71      	ldr	r3, [pc, #452]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 800171e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001720:	4b70      	ldr	r3, [pc, #448]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 8001722:	2101      	movs	r1, #1
 8001724:	438a      	bics	r2, r1
 8001726:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001728:	f7ff fa94 	bl	8000c54 <HAL_GetTick>
 800172c:	0003      	movs	r3, r0
 800172e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001732:	f7ff fa8f 	bl	8000c54 <HAL_GetTick>
 8001736:	0002      	movs	r2, r0
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e111      	b.n	8001968 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001744:	4b67      	ldr	r3, [pc, #412]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 8001746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001748:	2202      	movs	r2, #2
 800174a:	4013      	ands	r3, r2
 800174c:	d1f1      	bne.n	8001732 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2220      	movs	r2, #32
 8001754:	4013      	ands	r3, r2
 8001756:	d05c      	beq.n	8001812 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001758:	4b62      	ldr	r3, [pc, #392]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	220c      	movs	r2, #12
 800175e:	4013      	ands	r3, r2
 8001760:	2b0c      	cmp	r3, #12
 8001762:	d00e      	beq.n	8001782 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001764:	4b5f      	ldr	r3, [pc, #380]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	220c      	movs	r2, #12
 800176a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800176c:	2b08      	cmp	r3, #8
 800176e:	d114      	bne.n	800179a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001770:	4b5c      	ldr	r3, [pc, #368]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	23c0      	movs	r3, #192	; 0xc0
 8001776:	025b      	lsls	r3, r3, #9
 8001778:	401a      	ands	r2, r3
 800177a:	23c0      	movs	r3, #192	; 0xc0
 800177c:	025b      	lsls	r3, r3, #9
 800177e:	429a      	cmp	r2, r3
 8001780:	d10b      	bne.n	800179a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001782:	4b58      	ldr	r3, [pc, #352]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 8001784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001786:	2380      	movs	r3, #128	; 0x80
 8001788:	025b      	lsls	r3, r3, #9
 800178a:	4013      	ands	r3, r2
 800178c:	d040      	beq.n	8001810 <HAL_RCC_OscConfig+0x5a8>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d03c      	beq.n	8001810 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e0e6      	b.n	8001968 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d01b      	beq.n	80017da <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80017a2:	4b50      	ldr	r3, [pc, #320]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 80017a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017a6:	4b4f      	ldr	r3, [pc, #316]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 80017a8:	2180      	movs	r1, #128	; 0x80
 80017aa:	0249      	lsls	r1, r1, #9
 80017ac:	430a      	orrs	r2, r1
 80017ae:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b0:	f7ff fa50 	bl	8000c54 <HAL_GetTick>
 80017b4:	0003      	movs	r3, r0
 80017b6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017ba:	f7ff fa4b 	bl	8000c54 <HAL_GetTick>
 80017be:	0002      	movs	r2, r0
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e0cd      	b.n	8001968 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80017cc:	4b45      	ldr	r3, [pc, #276]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 80017ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017d0:	2380      	movs	r3, #128	; 0x80
 80017d2:	025b      	lsls	r3, r3, #9
 80017d4:	4013      	ands	r3, r2
 80017d6:	d0f0      	beq.n	80017ba <HAL_RCC_OscConfig+0x552>
 80017d8:	e01b      	b.n	8001812 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80017da:	4b42      	ldr	r3, [pc, #264]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 80017dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017de:	4b41      	ldr	r3, [pc, #260]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 80017e0:	4943      	ldr	r1, [pc, #268]	; (80018f0 <HAL_RCC_OscConfig+0x688>)
 80017e2:	400a      	ands	r2, r1
 80017e4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e6:	f7ff fa35 	bl	8000c54 <HAL_GetTick>
 80017ea:	0003      	movs	r3, r0
 80017ec:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017f0:	f7ff fa30 	bl	8000c54 <HAL_GetTick>
 80017f4:	0002      	movs	r2, r0
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e0b2      	b.n	8001968 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001802:	4b38      	ldr	r3, [pc, #224]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 8001804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001806:	2380      	movs	r3, #128	; 0x80
 8001808:	025b      	lsls	r3, r3, #9
 800180a:	4013      	ands	r3, r2
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x588>
 800180e:	e000      	b.n	8001812 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001810:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001816:	2b00      	cmp	r3, #0
 8001818:	d100      	bne.n	800181c <HAL_RCC_OscConfig+0x5b4>
 800181a:	e0a4      	b.n	8001966 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800181c:	4b31      	ldr	r3, [pc, #196]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	220c      	movs	r2, #12
 8001822:	4013      	ands	r3, r2
 8001824:	2b08      	cmp	r3, #8
 8001826:	d100      	bne.n	800182a <HAL_RCC_OscConfig+0x5c2>
 8001828:	e078      	b.n	800191c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182e:	2b02      	cmp	r3, #2
 8001830:	d14c      	bne.n	80018cc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001832:	4b2c      	ldr	r3, [pc, #176]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	4b2b      	ldr	r3, [pc, #172]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 8001838:	492e      	ldr	r1, [pc, #184]	; (80018f4 <HAL_RCC_OscConfig+0x68c>)
 800183a:	400a      	ands	r2, r1
 800183c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183e:	f7ff fa09 	bl	8000c54 <HAL_GetTick>
 8001842:	0003      	movs	r3, r0
 8001844:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001848:	f7ff fa04 	bl	8000c54 <HAL_GetTick>
 800184c:	0002      	movs	r2, r0
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e086      	b.n	8001968 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800185a:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	2380      	movs	r3, #128	; 0x80
 8001860:	049b      	lsls	r3, r3, #18
 8001862:	4013      	ands	r3, r2
 8001864:	d1f0      	bne.n	8001848 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001866:	4b1f      	ldr	r3, [pc, #124]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 8001868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186a:	220f      	movs	r2, #15
 800186c:	4393      	bics	r3, r2
 800186e:	0019      	movs	r1, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001874:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 8001876:	430a      	orrs	r2, r1
 8001878:	62da      	str	r2, [r3, #44]	; 0x2c
 800187a:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	4a1e      	ldr	r2, [pc, #120]	; (80018f8 <HAL_RCC_OscConfig+0x690>)
 8001880:	4013      	ands	r3, r2
 8001882:	0019      	movs	r1, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188c:	431a      	orrs	r2, r3
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 8001890:	430a      	orrs	r2, r1
 8001892:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001894:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 800189a:	2180      	movs	r1, #128	; 0x80
 800189c:	0449      	lsls	r1, r1, #17
 800189e:	430a      	orrs	r2, r1
 80018a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a2:	f7ff f9d7 	bl	8000c54 <HAL_GetTick>
 80018a6:	0003      	movs	r3, r0
 80018a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ac:	f7ff f9d2 	bl	8000c54 <HAL_GetTick>
 80018b0:	0002      	movs	r2, r0
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e054      	b.n	8001968 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	2380      	movs	r3, #128	; 0x80
 80018c4:	049b      	lsls	r3, r3, #18
 80018c6:	4013      	ands	r3, r2
 80018c8:	d0f0      	beq.n	80018ac <HAL_RCC_OscConfig+0x644>
 80018ca:	e04c      	b.n	8001966 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 80018d2:	4908      	ldr	r1, [pc, #32]	; (80018f4 <HAL_RCC_OscConfig+0x68c>)
 80018d4:	400a      	ands	r2, r1
 80018d6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d8:	f7ff f9bc 	bl	8000c54 <HAL_GetTick>
 80018dc:	0003      	movs	r3, r0
 80018de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e0:	e015      	b.n	800190e <HAL_RCC_OscConfig+0x6a6>
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	40021000 	.word	0x40021000
 80018e8:	00001388 	.word	0x00001388
 80018ec:	efffffff 	.word	0xefffffff
 80018f0:	fffeffff 	.word	0xfffeffff
 80018f4:	feffffff 	.word	0xfeffffff
 80018f8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018fc:	f7ff f9aa 	bl	8000c54 <HAL_GetTick>
 8001900:	0002      	movs	r2, r0
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e02c      	b.n	8001968 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800190e:	4b18      	ldr	r3, [pc, #96]	; (8001970 <HAL_RCC_OscConfig+0x708>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	2380      	movs	r3, #128	; 0x80
 8001914:	049b      	lsls	r3, r3, #18
 8001916:	4013      	ands	r3, r2
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x694>
 800191a:	e024      	b.n	8001966 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	2b01      	cmp	r3, #1
 8001922:	d101      	bne.n	8001928 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e01f      	b.n	8001968 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001928:	4b11      	ldr	r3, [pc, #68]	; (8001970 <HAL_RCC_OscConfig+0x708>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800192e:	4b10      	ldr	r3, [pc, #64]	; (8001970 <HAL_RCC_OscConfig+0x708>)
 8001930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001932:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	23c0      	movs	r3, #192	; 0xc0
 8001938:	025b      	lsls	r3, r3, #9
 800193a:	401a      	ands	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001940:	429a      	cmp	r2, r3
 8001942:	d10e      	bne.n	8001962 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	220f      	movs	r2, #15
 8001948:	401a      	ands	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800194e:	429a      	cmp	r2, r3
 8001950:	d107      	bne.n	8001962 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001952:	697a      	ldr	r2, [r7, #20]
 8001954:	23f0      	movs	r3, #240	; 0xf0
 8001956:	039b      	lsls	r3, r3, #14
 8001958:	401a      	ands	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800195e:	429a      	cmp	r2, r3
 8001960:	d001      	beq.n	8001966 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e000      	b.n	8001968 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	0018      	movs	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	b008      	add	sp, #32
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40021000 	.word	0x40021000

08001974 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e0bf      	b.n	8001b08 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001988:	4b61      	ldr	r3, [pc, #388]	; (8001b10 <HAL_RCC_ClockConfig+0x19c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2201      	movs	r2, #1
 800198e:	4013      	ands	r3, r2
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d911      	bls.n	80019ba <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001996:	4b5e      	ldr	r3, [pc, #376]	; (8001b10 <HAL_RCC_ClockConfig+0x19c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2201      	movs	r2, #1
 800199c:	4393      	bics	r3, r2
 800199e:	0019      	movs	r1, r3
 80019a0:	4b5b      	ldr	r3, [pc, #364]	; (8001b10 <HAL_RCC_ClockConfig+0x19c>)
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a8:	4b59      	ldr	r3, [pc, #356]	; (8001b10 <HAL_RCC_ClockConfig+0x19c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2201      	movs	r2, #1
 80019ae:	4013      	ands	r3, r2
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d001      	beq.n	80019ba <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e0a6      	b.n	8001b08 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2202      	movs	r2, #2
 80019c0:	4013      	ands	r3, r2
 80019c2:	d015      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2204      	movs	r2, #4
 80019ca:	4013      	ands	r3, r2
 80019cc:	d006      	beq.n	80019dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80019ce:	4b51      	ldr	r3, [pc, #324]	; (8001b14 <HAL_RCC_ClockConfig+0x1a0>)
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	4b50      	ldr	r3, [pc, #320]	; (8001b14 <HAL_RCC_ClockConfig+0x1a0>)
 80019d4:	21e0      	movs	r1, #224	; 0xe0
 80019d6:	00c9      	lsls	r1, r1, #3
 80019d8:	430a      	orrs	r2, r1
 80019da:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019dc:	4b4d      	ldr	r3, [pc, #308]	; (8001b14 <HAL_RCC_ClockConfig+0x1a0>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	22f0      	movs	r2, #240	; 0xf0
 80019e2:	4393      	bics	r3, r2
 80019e4:	0019      	movs	r1, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	4b4a      	ldr	r3, [pc, #296]	; (8001b14 <HAL_RCC_ClockConfig+0x1a0>)
 80019ec:	430a      	orrs	r2, r1
 80019ee:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2201      	movs	r2, #1
 80019f6:	4013      	ands	r3, r2
 80019f8:	d04c      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d107      	bne.n	8001a12 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a02:	4b44      	ldr	r3, [pc, #272]	; (8001b14 <HAL_RCC_ClockConfig+0x1a0>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	2380      	movs	r3, #128	; 0x80
 8001a08:	029b      	lsls	r3, r3, #10
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d120      	bne.n	8001a50 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e07a      	b.n	8001b08 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d107      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a1a:	4b3e      	ldr	r3, [pc, #248]	; (8001b14 <HAL_RCC_ClockConfig+0x1a0>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	2380      	movs	r3, #128	; 0x80
 8001a20:	049b      	lsls	r3, r3, #18
 8001a22:	4013      	ands	r3, r2
 8001a24:	d114      	bne.n	8001a50 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e06e      	b.n	8001b08 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b03      	cmp	r3, #3
 8001a30:	d107      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001a32:	4b38      	ldr	r3, [pc, #224]	; (8001b14 <HAL_RCC_ClockConfig+0x1a0>)
 8001a34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a36:	2380      	movs	r3, #128	; 0x80
 8001a38:	025b      	lsls	r3, r3, #9
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d108      	bne.n	8001a50 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e062      	b.n	8001b08 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a42:	4b34      	ldr	r3, [pc, #208]	; (8001b14 <HAL_RCC_ClockConfig+0x1a0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2202      	movs	r2, #2
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d101      	bne.n	8001a50 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e05b      	b.n	8001b08 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a50:	4b30      	ldr	r3, [pc, #192]	; (8001b14 <HAL_RCC_ClockConfig+0x1a0>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2203      	movs	r2, #3
 8001a56:	4393      	bics	r3, r2
 8001a58:	0019      	movs	r1, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	4b2d      	ldr	r3, [pc, #180]	; (8001b14 <HAL_RCC_ClockConfig+0x1a0>)
 8001a60:	430a      	orrs	r2, r1
 8001a62:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a64:	f7ff f8f6 	bl	8000c54 <HAL_GetTick>
 8001a68:	0003      	movs	r3, r0
 8001a6a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6c:	e009      	b.n	8001a82 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a6e:	f7ff f8f1 	bl	8000c54 <HAL_GetTick>
 8001a72:	0002      	movs	r2, r0
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	4a27      	ldr	r2, [pc, #156]	; (8001b18 <HAL_RCC_ClockConfig+0x1a4>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e042      	b.n	8001b08 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a82:	4b24      	ldr	r3, [pc, #144]	; (8001b14 <HAL_RCC_ClockConfig+0x1a0>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	220c      	movs	r2, #12
 8001a88:	401a      	ands	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d1ec      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a94:	4b1e      	ldr	r3, [pc, #120]	; (8001b10 <HAL_RCC_ClockConfig+0x19c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d211      	bcs.n	8001ac6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa2:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <HAL_RCC_ClockConfig+0x19c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	4393      	bics	r3, r2
 8001aaa:	0019      	movs	r1, r3
 8001aac:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <HAL_RCC_ClockConfig+0x19c>)
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab4:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <HAL_RCC_ClockConfig+0x19c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	4013      	ands	r3, r2
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d001      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e020      	b.n	8001b08 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2204      	movs	r2, #4
 8001acc:	4013      	ands	r3, r2
 8001ace:	d009      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ad0:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <HAL_RCC_ClockConfig+0x1a0>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	4a11      	ldr	r2, [pc, #68]	; (8001b1c <HAL_RCC_ClockConfig+0x1a8>)
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	0019      	movs	r1, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <HAL_RCC_ClockConfig+0x1a0>)
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ae4:	f000 f820 	bl	8001b28 <HAL_RCC_GetSysClockFreq>
 8001ae8:	0001      	movs	r1, r0
 8001aea:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <HAL_RCC_ClockConfig+0x1a0>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	091b      	lsrs	r3, r3, #4
 8001af0:	220f      	movs	r2, #15
 8001af2:	4013      	ands	r3, r2
 8001af4:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <HAL_RCC_ClockConfig+0x1ac>)
 8001af6:	5cd3      	ldrb	r3, [r2, r3]
 8001af8:	000a      	movs	r2, r1
 8001afa:	40da      	lsrs	r2, r3
 8001afc:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <HAL_RCC_ClockConfig+0x1b0>)
 8001afe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b00:	2003      	movs	r0, #3
 8001b02:	f7ff f861 	bl	8000bc8 <HAL_InitTick>
  
  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	0018      	movs	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	b004      	add	sp, #16
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40022000 	.word	0x40022000
 8001b14:	40021000 	.word	0x40021000
 8001b18:	00001388 	.word	0x00001388
 8001b1c:	fffff8ff 	.word	0xfffff8ff
 8001b20:	08003c34 	.word	0x08003c34
 8001b24:	20000000 	.word	0x20000000

08001b28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b28:	b590      	push	{r4, r7, lr}
 8001b2a:	b08f      	sub	sp, #60	; 0x3c
 8001b2c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001b2e:	2314      	movs	r3, #20
 8001b30:	18fb      	adds	r3, r7, r3
 8001b32:	4a38      	ldr	r2, [pc, #224]	; (8001c14 <HAL_RCC_GetSysClockFreq+0xec>)
 8001b34:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001b36:	c313      	stmia	r3!, {r0, r1, r4}
 8001b38:	6812      	ldr	r2, [r2, #0]
 8001b3a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001b3c:	1d3b      	adds	r3, r7, #4
 8001b3e:	4a36      	ldr	r2, [pc, #216]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001b40:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001b42:	c313      	stmia	r3!, {r0, r1, r4}
 8001b44:	6812      	ldr	r2, [r2, #0]
 8001b46:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b50:	2300      	movs	r3, #0
 8001b52:	637b      	str	r3, [r7, #52]	; 0x34
 8001b54:	2300      	movs	r3, #0
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001b5c:	4b2f      	ldr	r3, [pc, #188]	; (8001c1c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b64:	220c      	movs	r2, #12
 8001b66:	4013      	ands	r3, r2
 8001b68:	2b0c      	cmp	r3, #12
 8001b6a:	d047      	beq.n	8001bfc <HAL_RCC_GetSysClockFreq+0xd4>
 8001b6c:	d849      	bhi.n	8001c02 <HAL_RCC_GetSysClockFreq+0xda>
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d002      	beq.n	8001b78 <HAL_RCC_GetSysClockFreq+0x50>
 8001b72:	2b08      	cmp	r3, #8
 8001b74:	d003      	beq.n	8001b7e <HAL_RCC_GetSysClockFreq+0x56>
 8001b76:	e044      	b.n	8001c02 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b78:	4b29      	ldr	r3, [pc, #164]	; (8001c20 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b7a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b7c:	e044      	b.n	8001c08 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b80:	0c9b      	lsrs	r3, r3, #18
 8001b82:	220f      	movs	r2, #15
 8001b84:	4013      	ands	r3, r2
 8001b86:	2214      	movs	r2, #20
 8001b88:	18ba      	adds	r2, r7, r2
 8001b8a:	5cd3      	ldrb	r3, [r2, r3]
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b8e:	4b23      	ldr	r3, [pc, #140]	; (8001c1c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b92:	220f      	movs	r2, #15
 8001b94:	4013      	ands	r3, r2
 8001b96:	1d3a      	adds	r2, r7, #4
 8001b98:	5cd3      	ldrb	r3, [r2, r3]
 8001b9a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b9e:	23c0      	movs	r3, #192	; 0xc0
 8001ba0:	025b      	lsls	r3, r3, #9
 8001ba2:	401a      	ands	r2, r3
 8001ba4:	2380      	movs	r3, #128	; 0x80
 8001ba6:	025b      	lsls	r3, r3, #9
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d109      	bne.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001bac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bae:	481c      	ldr	r0, [pc, #112]	; (8001c20 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bb0:	f7fe faaa 	bl	8000108 <__udivsi3>
 8001bb4:	0003      	movs	r3, r0
 8001bb6:	001a      	movs	r2, r3
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	4353      	muls	r3, r2
 8001bbc:	637b      	str	r3, [r7, #52]	; 0x34
 8001bbe:	e01a      	b.n	8001bf6 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001bc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bc2:	23c0      	movs	r3, #192	; 0xc0
 8001bc4:	025b      	lsls	r3, r3, #9
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	23c0      	movs	r3, #192	; 0xc0
 8001bca:	025b      	lsls	r3, r3, #9
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d109      	bne.n	8001be4 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001bd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bd2:	4814      	ldr	r0, [pc, #80]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001bd4:	f7fe fa98 	bl	8000108 <__udivsi3>
 8001bd8:	0003      	movs	r3, r0
 8001bda:	001a      	movs	r2, r3
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	4353      	muls	r3, r2
 8001be0:	637b      	str	r3, [r7, #52]	; 0x34
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001be4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001be6:	480e      	ldr	r0, [pc, #56]	; (8001c20 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001be8:	f7fe fa8e 	bl	8000108 <__udivsi3>
 8001bec:	0003      	movs	r3, r0
 8001bee:	001a      	movs	r2, r3
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	4353      	muls	r3, r2
 8001bf4:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bf8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bfa:	e005      	b.n	8001c08 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001bfc:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001bfe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c00:	e002      	b.n	8001c08 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c04:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c06:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	b00f      	add	sp, #60	; 0x3c
 8001c10:	bd90      	pop	{r4, r7, pc}
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	08003c14 	.word	0x08003c14
 8001c18:	08003c24 	.word	0x08003c24
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	007a1200 	.word	0x007a1200
 8001c24:	02dc6c00 	.word	0x02dc6c00

08001c28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c2c:	4b02      	ldr	r3, [pc, #8]	; (8001c38 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
}
 8001c30:	0018      	movs	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	20000000 	.word	0x20000000

08001c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001c40:	f7ff fff2 	bl	8001c28 <HAL_RCC_GetHCLKFreq>
 8001c44:	0001      	movs	r1, r0
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	0a1b      	lsrs	r3, r3, #8
 8001c4c:	2207      	movs	r2, #7
 8001c4e:	4013      	ands	r3, r2
 8001c50:	4a04      	ldr	r2, [pc, #16]	; (8001c64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c52:	5cd3      	ldrb	r3, [r2, r3]
 8001c54:	40d9      	lsrs	r1, r3
 8001c56:	000b      	movs	r3, r1
}    
 8001c58:	0018      	movs	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	40021000 	.word	0x40021000
 8001c64:	08003c44 	.word	0x08003c44

08001c68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	2380      	movs	r3, #128	; 0x80
 8001c7e:	025b      	lsls	r3, r3, #9
 8001c80:	4013      	ands	r3, r2
 8001c82:	d100      	bne.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001c84:	e08e      	b.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001c86:	2017      	movs	r0, #23
 8001c88:	183b      	adds	r3, r7, r0
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c8e:	4b6e      	ldr	r3, [pc, #440]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c90:	69da      	ldr	r2, [r3, #28]
 8001c92:	2380      	movs	r3, #128	; 0x80
 8001c94:	055b      	lsls	r3, r3, #21
 8001c96:	4013      	ands	r3, r2
 8001c98:	d110      	bne.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c9a:	4b6b      	ldr	r3, [pc, #428]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c9c:	69da      	ldr	r2, [r3, #28]
 8001c9e:	4b6a      	ldr	r3, [pc, #424]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ca0:	2180      	movs	r1, #128	; 0x80
 8001ca2:	0549      	lsls	r1, r1, #21
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	61da      	str	r2, [r3, #28]
 8001ca8:	4b67      	ldr	r3, [pc, #412]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001caa:	69da      	ldr	r2, [r3, #28]
 8001cac:	2380      	movs	r3, #128	; 0x80
 8001cae:	055b      	lsls	r3, r3, #21
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cb6:	183b      	adds	r3, r7, r0
 8001cb8:	2201      	movs	r2, #1
 8001cba:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cbc:	4b63      	ldr	r3, [pc, #396]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	2380      	movs	r3, #128	; 0x80
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	d11a      	bne.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cc8:	4b60      	ldr	r3, [pc, #384]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	4b5f      	ldr	r3, [pc, #380]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001cce:	2180      	movs	r1, #128	; 0x80
 8001cd0:	0049      	lsls	r1, r1, #1
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cd6:	f7fe ffbd 	bl	8000c54 <HAL_GetTick>
 8001cda:	0003      	movs	r3, r0
 8001cdc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cde:	e008      	b.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce0:	f7fe ffb8 	bl	8000c54 <HAL_GetTick>
 8001ce4:	0002      	movs	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b64      	cmp	r3, #100	; 0x64
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e0a6      	b.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf2:	4b56      	ldr	r3, [pc, #344]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001cfe:	4b52      	ldr	r3, [pc, #328]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d00:	6a1a      	ldr	r2, [r3, #32]
 8001d02:	23c0      	movs	r3, #192	; 0xc0
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4013      	ands	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d034      	beq.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	23c0      	movs	r3, #192	; 0xc0
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4013      	ands	r3, r2
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d02c      	beq.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d20:	4b49      	ldr	r3, [pc, #292]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	4a4a      	ldr	r2, [pc, #296]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001d26:	4013      	ands	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d2a:	4b47      	ldr	r3, [pc, #284]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d2c:	6a1a      	ldr	r2, [r3, #32]
 8001d2e:	4b46      	ldr	r3, [pc, #280]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d30:	2180      	movs	r1, #128	; 0x80
 8001d32:	0249      	lsls	r1, r1, #9
 8001d34:	430a      	orrs	r2, r1
 8001d36:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d38:	4b43      	ldr	r3, [pc, #268]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d3a:	6a1a      	ldr	r2, [r3, #32]
 8001d3c:	4b42      	ldr	r3, [pc, #264]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d3e:	4945      	ldr	r1, [pc, #276]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001d40:	400a      	ands	r2, r1
 8001d42:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d44:	4b40      	ldr	r3, [pc, #256]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d013      	beq.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d52:	f7fe ff7f 	bl	8000c54 <HAL_GetTick>
 8001d56:	0003      	movs	r3, r0
 8001d58:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5a:	e009      	b.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5c:	f7fe ff7a 	bl	8000c54 <HAL_GetTick>
 8001d60:	0002      	movs	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	4a3c      	ldr	r2, [pc, #240]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e067      	b.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d70:	4b35      	ldr	r3, [pc, #212]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	2202      	movs	r2, #2
 8001d76:	4013      	ands	r3, r2
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d7a:	4b33      	ldr	r3, [pc, #204]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	4a34      	ldr	r2, [pc, #208]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	0019      	movs	r1, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	4b2f      	ldr	r3, [pc, #188]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d8e:	2317      	movs	r3, #23
 8001d90:	18fb      	adds	r3, r7, r3
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d105      	bne.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d98:	4b2b      	ldr	r3, [pc, #172]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d9a:	69da      	ldr	r2, [r3, #28]
 8001d9c:	4b2a      	ldr	r3, [pc, #168]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d9e:	492f      	ldr	r1, [pc, #188]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001da0:	400a      	ands	r2, r1
 8001da2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2201      	movs	r2, #1
 8001daa:	4013      	ands	r3, r2
 8001dac:	d009      	beq.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001dae:	4b26      	ldr	r3, [pc, #152]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	2203      	movs	r2, #3
 8001db4:	4393      	bics	r3, r2
 8001db6:	0019      	movs	r1, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	4b22      	ldr	r3, [pc, #136]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d009      	beq.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001dcc:	4b1e      	ldr	r3, [pc, #120]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd0:	4a23      	ldr	r2, [pc, #140]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	0019      	movs	r1, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68da      	ldr	r2, [r3, #12]
 8001dda:	4b1b      	ldr	r3, [pc, #108]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2220      	movs	r2, #32
 8001de6:	4013      	ands	r3, r2
 8001de8:	d009      	beq.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001dea:	4b17      	ldr	r3, [pc, #92]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	2210      	movs	r2, #16
 8001df0:	4393      	bics	r3, r2
 8001df2:	0019      	movs	r1, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691a      	ldr	r2, [r3, #16]
 8001df8:	4b13      	ldr	r3, [pc, #76]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	2380      	movs	r3, #128	; 0x80
 8001e04:	029b      	lsls	r3, r3, #10
 8001e06:	4013      	ands	r3, r2
 8001e08:	d009      	beq.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e0a:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	2280      	movs	r2, #128	; 0x80
 8001e10:	4393      	bics	r3, r2
 8001e12:	0019      	movs	r1, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	699a      	ldr	r2, [r3, #24]
 8001e18:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	2380      	movs	r3, #128	; 0x80
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	4013      	ands	r3, r2
 8001e28:	d009      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001e2a:	4b07      	ldr	r3, [pc, #28]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	2240      	movs	r2, #64	; 0x40
 8001e30:	4393      	bics	r3, r2
 8001e32:	0019      	movs	r1, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	695a      	ldr	r2, [r3, #20]
 8001e38:	4b03      	ldr	r3, [pc, #12]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	0018      	movs	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	b006      	add	sp, #24
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40007000 	.word	0x40007000
 8001e50:	fffffcff 	.word	0xfffffcff
 8001e54:	fffeffff 	.word	0xfffeffff
 8001e58:	00001388 	.word	0x00001388
 8001e5c:	efffffff 	.word	0xefffffff
 8001e60:	fffcffff 	.word	0xfffcffff

08001e64 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e081      	b.n	8001f7a <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	7f5b      	ldrb	r3, [r3, #29]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d106      	bne.n	8001e8e <HAL_RTC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f7fe fc89 	bl	80007a0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2202      	movs	r2, #2
 8001e92:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	22ca      	movs	r2, #202	; 0xca
 8001e9a:	625a      	str	r2, [r3, #36]	; 0x24
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2253      	movs	r2, #83	; 0x53
 8001ea2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f000 f9fb 	bl	80022a2 <RTC_EnterInitMode>
 8001eac:	1e03      	subs	r3, r0, #0
 8001eae:	d008      	beq.n	8001ec2 <HAL_RTC_Init+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	22ff      	movs	r2, #255	; 0xff
 8001eb6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2204      	movs	r2, #4
 8001ebc:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e05b      	b.n	8001f7a <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	492d      	ldr	r1, [pc, #180]	; (8001f84 <HAL_RTC_Init+0x120>)
 8001ece:	400a      	ands	r2, r1
 8001ed0:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6899      	ldr	r1, [r3, #8]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	68d2      	ldr	r2, [r2, #12]
 8001ef8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6919      	ldr	r1, [r3, #16]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	041a      	lsls	r2, r3, #16
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2180      	movs	r1, #128	; 0x80
 8001f1a:	438a      	bics	r2, r1
 8001f1c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	2220      	movs	r2, #32
 8001f26:	4013      	ands	r3, r2
 8001f28:	d10e      	bne.n	8001f48 <HAL_RTC_Init+0xe4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f000 f98f 	bl	8002250 <HAL_RTC_WaitForSynchro>
 8001f32:	1e03      	subs	r3, r0, #0
 8001f34:	d008      	beq.n	8001f48 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	22ff      	movs	r2, #255	; 0xff
 8001f3c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2204      	movs	r2, #4
 8001f42:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e018      	b.n	8001f7a <HAL_RTC_Init+0x116>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	490d      	ldr	r1, [pc, #52]	; (8001f88 <HAL_RTC_Init+0x124>)
 8001f54:	400a      	ands	r2, r1
 8001f56:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	699a      	ldr	r2, [r3, #24]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	22ff      	movs	r2, #255	; 0xff
 8001f70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8001f78:	2300      	movs	r3, #0
  }
}
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	b002      	add	sp, #8
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	ff8fffbf 	.word	0xff8fffbf
 8001f88:	fffbffff 	.word	0xfffbffff

08001f8c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001f8c:	b590      	push	{r4, r7, lr}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	7f1b      	ldrb	r3, [r3, #28]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_RTC_SetTime+0x1c>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e0a5      	b.n	80020f4 <HAL_RTC_SetTime+0x168>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2201      	movs	r2, #1
 8001fac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d125      	bne.n	8002006 <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2240      	movs	r2, #64	; 0x40
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	d102      	bne.n	8001fcc <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	f000 f992 	bl	80022fa <RTC_ByteToBcd2>
 8001fd6:	0003      	movs	r3, r0
 8001fd8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	785b      	ldrb	r3, [r3, #1]
 8001fde:	0018      	movs	r0, r3
 8001fe0:	f000 f98b 	bl	80022fa <RTC_ByteToBcd2>
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001fe8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	789b      	ldrb	r3, [r3, #2]
 8001fee:	0018      	movs	r0, r3
 8001ff0:	f000 f983 	bl	80022fa <RTC_ByteToBcd2>
 8001ff4:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001ff6:	0022      	movs	r2, r4
 8001ff8:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	78db      	ldrb	r3, [r3, #3]
 8001ffe:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002000:	4313      	orrs	r3, r2
 8002002:	617b      	str	r3, [r7, #20]
 8002004:	e017      	b.n	8002036 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	2240      	movs	r2, #64	; 0x40
 800200e:	4013      	ands	r3, r2
 8002010:	d102      	bne.n	8002018 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2200      	movs	r2, #0
 8002016:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	785b      	ldrb	r3, [r3, #1]
 8002022:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002024:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800202a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	78db      	ldrb	r3, [r3, #3]
 8002030:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002032:	4313      	orrs	r3, r2
 8002034:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	22ca      	movs	r2, #202	; 0xca
 800203c:	625a      	str	r2, [r3, #36]	; 0x24
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2253      	movs	r2, #83	; 0x53
 8002044:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	0018      	movs	r0, r3
 800204a:	f000 f92a 	bl	80022a2 <RTC_EnterInitMode>
 800204e:	1e03      	subs	r3, r0, #0
 8002050:	d00b      	beq.n	800206a <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	22ff      	movs	r2, #255	; 0xff
 8002058:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2204      	movs	r2, #4
 800205e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e044      	b.n	80020f4 <HAL_RTC_SetTime+0x168>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	4922      	ldr	r1, [pc, #136]	; (80020fc <HAL_RTC_SetTime+0x170>)
 8002072:	400a      	ands	r2, r1
 8002074:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	491f      	ldr	r1, [pc, #124]	; (8002100 <HAL_RTC_SetTime+0x174>)
 8002082:	400a      	ands	r2, r1
 8002084:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6899      	ldr	r1, [r3, #8]
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	68da      	ldr	r2, [r3, #12]
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	431a      	orrs	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	430a      	orrs	r2, r1
 800209c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2180      	movs	r1, #128	; 0x80
 80020aa:	438a      	bics	r2, r1
 80020ac:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	2220      	movs	r2, #32
 80020b6:	4013      	ands	r3, r2
 80020b8:	d111      	bne.n	80020de <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	0018      	movs	r0, r3
 80020be:	f000 f8c7 	bl	8002250 <HAL_RTC_WaitForSynchro>
 80020c2:	1e03      	subs	r3, r0, #0
 80020c4:	d00b      	beq.n	80020de <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	22ff      	movs	r2, #255	; 0xff
 80020cc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2204      	movs	r2, #4
 80020d2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e00a      	b.n	80020f4 <HAL_RTC_SetTime+0x168>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	22ff      	movs	r2, #255	; 0xff
 80020e4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2201      	movs	r2, #1
 80020ea:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80020f2:	2300      	movs	r3, #0
  }
}
 80020f4:	0018      	movs	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b007      	add	sp, #28
 80020fa:	bd90      	pop	{r4, r7, pc}
 80020fc:	007f7f7f 	.word	0x007f7f7f
 8002100:	fffbffff 	.word	0xfffbffff

08002104 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002104:	b590      	push	{r4, r7, lr}
 8002106:	b087      	sub	sp, #28
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	7f1b      	ldrb	r3, [r3, #28]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d101      	bne.n	8002120 <HAL_RTC_SetDate+0x1c>
 800211c:	2302      	movs	r3, #2
 800211e:	e091      	b.n	8002244 <HAL_RTC_SetDate+0x140>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2201      	movs	r2, #1
 8002124:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2202      	movs	r2, #2
 800212a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10e      	bne.n	8002150 <HAL_RTC_SetDate+0x4c>
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	785b      	ldrb	r3, [r3, #1]
 8002136:	001a      	movs	r2, r3
 8002138:	2310      	movs	r3, #16
 800213a:	4013      	ands	r3, r2
 800213c:	d008      	beq.n	8002150 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	785b      	ldrb	r3, [r3, #1]
 8002142:	2210      	movs	r2, #16
 8002144:	4393      	bics	r3, r2
 8002146:	b2db      	uxtb	r3, r3
 8002148:	330a      	adds	r3, #10
 800214a:	b2da      	uxtb	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d11c      	bne.n	8002190 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	78db      	ldrb	r3, [r3, #3]
 800215a:	0018      	movs	r0, r3
 800215c:	f000 f8cd 	bl	80022fa <RTC_ByteToBcd2>
 8002160:	0003      	movs	r3, r0
 8002162:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	785b      	ldrb	r3, [r3, #1]
 8002168:	0018      	movs	r0, r3
 800216a:	f000 f8c6 	bl	80022fa <RTC_ByteToBcd2>
 800216e:	0003      	movs	r3, r0
 8002170:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002172:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	789b      	ldrb	r3, [r3, #2]
 8002178:	0018      	movs	r0, r3
 800217a:	f000 f8be 	bl	80022fa <RTC_ByteToBcd2>
 800217e:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002180:	0022      	movs	r2, r4
 8002182:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800218a:	4313      	orrs	r3, r2
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	e00e      	b.n	80021ae <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	78db      	ldrb	r3, [r3, #3]
 8002194:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	785b      	ldrb	r3, [r3, #1]
 800219a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800219c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80021a2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80021aa:	4313      	orrs	r3, r2
 80021ac:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	22ca      	movs	r2, #202	; 0xca
 80021b4:	625a      	str	r2, [r3, #36]	; 0x24
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2253      	movs	r2, #83	; 0x53
 80021bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	0018      	movs	r0, r3
 80021c2:	f000 f86e 	bl	80022a2 <RTC_EnterInitMode>
 80021c6:	1e03      	subs	r3, r0, #0
 80021c8:	d00b      	beq.n	80021e2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	22ff      	movs	r2, #255	; 0xff
 80021d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2204      	movs	r2, #4
 80021d6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e030      	b.n	8002244 <HAL_RTC_SetDate+0x140>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	4918      	ldr	r1, [pc, #96]	; (800224c <HAL_RTC_SetDate+0x148>)
 80021ea:	400a      	ands	r2, r1
 80021ec:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68da      	ldr	r2, [r3, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2180      	movs	r1, #128	; 0x80
 80021fa:	438a      	bics	r2, r1
 80021fc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	2220      	movs	r2, #32
 8002206:	4013      	ands	r3, r2
 8002208:	d111      	bne.n	800222e <HAL_RTC_SetDate+0x12a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	0018      	movs	r0, r3
 800220e:	f000 f81f 	bl	8002250 <HAL_RTC_WaitForSynchro>
 8002212:	1e03      	subs	r3, r0, #0
 8002214:	d00b      	beq.n	800222e <HAL_RTC_SetDate+0x12a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	22ff      	movs	r2, #255	; 0xff
 800221c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2204      	movs	r2, #4
 8002222:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e00a      	b.n	8002244 <HAL_RTC_SetDate+0x140>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	22ff      	movs	r2, #255	; 0xff
 8002234:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2201      	movs	r2, #1
 800223a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002242:	2300      	movs	r3, #0
  }
}
 8002244:	0018      	movs	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	b007      	add	sp, #28
 800224a:	bd90      	pop	{r4, r7, pc}
 800224c:	00ffff3f 	.word	0x00ffff3f

08002250 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68da      	ldr	r2, [r3, #12]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	21a0      	movs	r1, #160	; 0xa0
 8002268:	438a      	bics	r2, r1
 800226a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800226c:	f7fe fcf2 	bl	8000c54 <HAL_GetTick>
 8002270:	0003      	movs	r3, r0
 8002272:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002274:	e00a      	b.n	800228c <HAL_RTC_WaitForSynchro+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002276:	f7fe fced 	bl	8000c54 <HAL_GetTick>
 800227a:	0002      	movs	r2, r0
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	1ad2      	subs	r2, r2, r3
 8002280:	23fa      	movs	r3, #250	; 0xfa
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	429a      	cmp	r2, r3
 8002286:	d901      	bls.n	800228c <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e006      	b.n	800229a <HAL_RTC_WaitForSynchro+0x4a>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	2220      	movs	r2, #32
 8002294:	4013      	ands	r3, r2
 8002296:	d0ee      	beq.n	8002276 <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	0018      	movs	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	b004      	add	sp, #16
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b084      	sub	sp, #16
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	2240      	movs	r2, #64	; 0x40
 80022b6:	4013      	ands	r3, r2
 80022b8:	d11a      	bne.n	80022f0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2201      	movs	r2, #1
 80022c0:	4252      	negs	r2, r2
 80022c2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80022c4:	f7fe fcc6 	bl	8000c54 <HAL_GetTick>
 80022c8:	0003      	movs	r3, r0
 80022ca:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80022cc:	e00a      	b.n	80022e4 <RTC_EnterInitMode+0x42>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80022ce:	f7fe fcc1 	bl	8000c54 <HAL_GetTick>
 80022d2:	0002      	movs	r2, r0
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	1ad2      	subs	r2, r2, r3
 80022d8:	23fa      	movs	r3, #250	; 0xfa
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	429a      	cmp	r2, r3
 80022de:	d901      	bls.n	80022e4 <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e006      	b.n	80022f2 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	2240      	movs	r2, #64	; 0x40
 80022ec:	4013      	ands	r3, r2
 80022ee:	d0ee      	beq.n	80022ce <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	0018      	movs	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	b004      	add	sp, #16
 80022f8:	bd80      	pop	{r7, pc}

080022fa <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b084      	sub	sp, #16
 80022fe:	af00      	add	r7, sp, #0
 8002300:	0002      	movs	r2, r0
 8002302:	1dfb      	adds	r3, r7, #7
 8002304:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002306:	2300      	movs	r3, #0
 8002308:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800230a:	e007      	b.n	800231c <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	3301      	adds	r3, #1
 8002310:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002312:	1dfb      	adds	r3, r7, #7
 8002314:	1dfa      	adds	r2, r7, #7
 8002316:	7812      	ldrb	r2, [r2, #0]
 8002318:	3a0a      	subs	r2, #10
 800231a:	701a      	strb	r2, [r3, #0]
  while (Value >= 10U)
 800231c:	1dfb      	adds	r3, r7, #7
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b09      	cmp	r3, #9
 8002322:	d8f3      	bhi.n	800230c <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	b2db      	uxtb	r3, r3
 8002328:	011b      	lsls	r3, r3, #4
 800232a:	b2da      	uxtb	r2, r3
 800232c:	1dfb      	adds	r3, r7, #7
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	4313      	orrs	r3, r2
 8002332:	b2db      	uxtb	r3, r3
}
 8002334:	0018      	movs	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	b004      	add	sp, #16
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e0a8      	b.n	80024a0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	2b00      	cmp	r3, #0
 8002354:	d109      	bne.n	800236a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	2382      	movs	r3, #130	; 0x82
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	429a      	cmp	r2, r3
 8002360:	d009      	beq.n	8002376 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	61da      	str	r2, [r3, #28]
 8002368:	e005      	b.n	8002376 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	225d      	movs	r2, #93	; 0x5d
 8002380:	5c9b      	ldrb	r3, [r3, r2]
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d107      	bne.n	8002398 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	225c      	movs	r2, #92	; 0x5c
 800238c:	2100      	movs	r1, #0
 800238e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	0018      	movs	r0, r3
 8002394:	f7fe fa1c 	bl	80007d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	225d      	movs	r2, #93	; 0x5d
 800239c:	2102      	movs	r1, #2
 800239e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2140      	movs	r1, #64	; 0x40
 80023ac:	438a      	bics	r2, r1
 80023ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	23e0      	movs	r3, #224	; 0xe0
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d902      	bls.n	80023c2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80023bc:	2300      	movs	r3, #0
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	e002      	b.n	80023c8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80023c2:	2380      	movs	r3, #128	; 0x80
 80023c4:	015b      	lsls	r3, r3, #5
 80023c6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68da      	ldr	r2, [r3, #12]
 80023cc:	23f0      	movs	r3, #240	; 0xf0
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d008      	beq.n	80023e6 <HAL_SPI_Init+0xaa>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	23e0      	movs	r3, #224	; 0xe0
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	429a      	cmp	r2, r3
 80023de:	d002      	beq.n	80023e6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	2382      	movs	r3, #130	; 0x82
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	401a      	ands	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6899      	ldr	r1, [r3, #8]
 80023f4:	2384      	movs	r3, #132	; 0x84
 80023f6:	021b      	lsls	r3, r3, #8
 80023f8:	400b      	ands	r3, r1
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	2102      	movs	r1, #2
 8002402:	400b      	ands	r3, r1
 8002404:	431a      	orrs	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	2101      	movs	r1, #1
 800240c:	400b      	ands	r3, r1
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6999      	ldr	r1, [r3, #24]
 8002414:	2380      	movs	r3, #128	; 0x80
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	400b      	ands	r3, r1
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	2138      	movs	r1, #56	; 0x38
 8002422:	400b      	ands	r3, r1
 8002424:	431a      	orrs	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	2180      	movs	r1, #128	; 0x80
 800242c:	400b      	ands	r3, r1
 800242e:	431a      	orrs	r2, r3
 8002430:	0011      	movs	r1, r2
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002436:	2380      	movs	r3, #128	; 0x80
 8002438:	019b      	lsls	r3, r3, #6
 800243a:	401a      	ands	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	0c1b      	lsrs	r3, r3, #16
 800244a:	2204      	movs	r2, #4
 800244c:	401a      	ands	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	2110      	movs	r1, #16
 8002454:	400b      	ands	r3, r1
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800245c:	2108      	movs	r1, #8
 800245e:	400b      	ands	r3, r1
 8002460:	431a      	orrs	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68d9      	ldr	r1, [r3, #12]
 8002466:	23f0      	movs	r3, #240	; 0xf0
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	400b      	ands	r3, r1
 800246c:	431a      	orrs	r2, r3
 800246e:	0011      	movs	r1, r2
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	2380      	movs	r3, #128	; 0x80
 8002474:	015b      	lsls	r3, r3, #5
 8002476:	401a      	ands	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	430a      	orrs	r2, r1
 800247e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	69da      	ldr	r2, [r3, #28]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4907      	ldr	r1, [pc, #28]	; (80024a8 <HAL_SPI_Init+0x16c>)
 800248c:	400a      	ands	r2, r1
 800248e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	225d      	movs	r2, #93	; 0x5d
 800249a:	2101      	movs	r1, #1
 800249c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	0018      	movs	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	b004      	add	sp, #16
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	fffff7ff 	.word	0xfffff7ff

080024ac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b088      	sub	sp, #32
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	099b      	lsrs	r3, r3, #6
 80024c8:	001a      	movs	r2, r3
 80024ca:	2301      	movs	r3, #1
 80024cc:	4013      	ands	r3, r2
 80024ce:	d10f      	bne.n	80024f0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	2201      	movs	r2, #1
 80024d4:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80024d6:	d00b      	beq.n	80024f0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	099b      	lsrs	r3, r3, #6
 80024dc:	001a      	movs	r2, r3
 80024de:	2301      	movs	r3, #1
 80024e0:	4013      	ands	r3, r2
 80024e2:	d005      	beq.n	80024f0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	0010      	movs	r0, r2
 80024ec:	4798      	blx	r3
    return;
 80024ee:	e0d5      	b.n	800269c <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	085b      	lsrs	r3, r3, #1
 80024f4:	001a      	movs	r2, r3
 80024f6:	2301      	movs	r3, #1
 80024f8:	4013      	ands	r3, r2
 80024fa:	d00b      	beq.n	8002514 <HAL_SPI_IRQHandler+0x68>
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	09db      	lsrs	r3, r3, #7
 8002500:	001a      	movs	r2, r3
 8002502:	2301      	movs	r3, #1
 8002504:	4013      	ands	r3, r2
 8002506:	d005      	beq.n	8002514 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	0010      	movs	r0, r2
 8002510:	4798      	blx	r3
    return;
 8002512:	e0c3      	b.n	800269c <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	095b      	lsrs	r3, r3, #5
 8002518:	001a      	movs	r2, r3
 800251a:	2301      	movs	r3, #1
 800251c:	4013      	ands	r3, r2
 800251e:	d10c      	bne.n	800253a <HAL_SPI_IRQHandler+0x8e>
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	099b      	lsrs	r3, r3, #6
 8002524:	001a      	movs	r2, r3
 8002526:	2301      	movs	r3, #1
 8002528:	4013      	ands	r3, r2
 800252a:	d106      	bne.n	800253a <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	0a1b      	lsrs	r3, r3, #8
 8002530:	001a      	movs	r2, r3
 8002532:	2301      	movs	r3, #1
 8002534:	4013      	ands	r3, r2
 8002536:	d100      	bne.n	800253a <HAL_SPI_IRQHandler+0x8e>
 8002538:	e0b0      	b.n	800269c <HAL_SPI_IRQHandler+0x1f0>
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	095b      	lsrs	r3, r3, #5
 800253e:	001a      	movs	r2, r3
 8002540:	2301      	movs	r3, #1
 8002542:	4013      	ands	r3, r2
 8002544:	d100      	bne.n	8002548 <HAL_SPI_IRQHandler+0x9c>
 8002546:	e0a9      	b.n	800269c <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	099b      	lsrs	r3, r3, #6
 800254c:	001a      	movs	r2, r3
 800254e:	2301      	movs	r3, #1
 8002550:	4013      	ands	r3, r2
 8002552:	d023      	beq.n	800259c <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	225d      	movs	r2, #93	; 0x5d
 8002558:	5c9b      	ldrb	r3, [r3, r2]
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b03      	cmp	r3, #3
 800255e:	d011      	beq.n	8002584 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002564:	2204      	movs	r2, #4
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	617b      	str	r3, [r7, #20]
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	e00b      	b.n	800259c <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002584:	2300      	movs	r3, #0
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	693b      	ldr	r3, [r7, #16]
        return;
 800259a:	e07f      	b.n	800269c <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	095b      	lsrs	r3, r3, #5
 80025a0:	001a      	movs	r2, r3
 80025a2:	2301      	movs	r3, #1
 80025a4:	4013      	ands	r3, r2
 80025a6:	d014      	beq.n	80025d2 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ac:	2201      	movs	r2, #1
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80025b4:	2300      	movs	r3, #0
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2140      	movs	r1, #64	; 0x40
 80025cc:	438a      	bics	r2, r1
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	0a1b      	lsrs	r3, r3, #8
 80025d6:	001a      	movs	r2, r3
 80025d8:	2301      	movs	r3, #1
 80025da:	4013      	ands	r3, r2
 80025dc:	d00c      	beq.n	80025f8 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025e2:	2208      	movs	r2, #8
 80025e4:	431a      	orrs	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80025ea:	2300      	movs	r3, #0
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	60bb      	str	r3, [r7, #8]
 80025f6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d04c      	beq.n	800269a <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	21e0      	movs	r1, #224	; 0xe0
 800260c:	438a      	bics	r2, r1
 800260e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	225d      	movs	r2, #93	; 0x5d
 8002614:	2101      	movs	r1, #1
 8002616:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	2202      	movs	r2, #2
 800261c:	4013      	ands	r3, r2
 800261e:	d103      	bne.n	8002628 <HAL_SPI_IRQHandler+0x17c>
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	2201      	movs	r2, #1
 8002624:	4013      	ands	r3, r2
 8002626:	d032      	beq.n	800268e <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2103      	movs	r1, #3
 8002634:	438a      	bics	r2, r1
 8002636:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263c:	2b00      	cmp	r3, #0
 800263e:	d010      	beq.n	8002662 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002644:	4a17      	ldr	r2, [pc, #92]	; (80026a4 <HAL_SPI_IRQHandler+0x1f8>)
 8002646:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264c:	0018      	movs	r0, r3
 800264e:	f7fe fc21 	bl	8000e94 <HAL_DMA_Abort_IT>
 8002652:	1e03      	subs	r3, r0, #0
 8002654:	d005      	beq.n	8002662 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800265a:	2240      	movs	r2, #64	; 0x40
 800265c:	431a      	orrs	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002666:	2b00      	cmp	r3, #0
 8002668:	d016      	beq.n	8002698 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266e:	4a0d      	ldr	r2, [pc, #52]	; (80026a4 <HAL_SPI_IRQHandler+0x1f8>)
 8002670:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002676:	0018      	movs	r0, r3
 8002678:	f7fe fc0c 	bl	8000e94 <HAL_DMA_Abort_IT>
 800267c:	1e03      	subs	r3, r0, #0
 800267e:	d00b      	beq.n	8002698 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002684:	2240      	movs	r2, #64	; 0x40
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800268c:	e004      	b.n	8002698 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	0018      	movs	r0, r3
 8002692:	f000 f809 	bl	80026a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002696:	e000      	b.n	800269a <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8002698:	46c0      	nop			; (mov r8, r8)
    return;
 800269a:	46c0      	nop			; (mov r8, r8)
  }
}
 800269c:	46bd      	mov	sp, r7
 800269e:	b008      	add	sp, #32
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	080026b9 	.word	0x080026b9

080026a8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80026b0:	46c0      	nop			; (mov r8, r8)
 80026b2:	46bd      	mov	sp, r7
 80026b4:	b002      	add	sp, #8
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2246      	movs	r2, #70	; 0x46
 80026ca:	2100      	movs	r1, #0
 80026cc:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	0018      	movs	r0, r3
 80026d8:	f7ff ffe6 	bl	80026a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80026dc:	46c0      	nop			; (mov r8, r8)
 80026de:	46bd      	mov	sp, r7
 80026e0:	b004      	add	sp, #16
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e042      	b.n	800277c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	223d      	movs	r2, #61	; 0x3d
 80026fa:	5c9b      	ldrb	r3, [r3, r2]
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d107      	bne.n	8002712 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	223c      	movs	r2, #60	; 0x3c
 8002706:	2100      	movs	r1, #0
 8002708:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	0018      	movs	r0, r3
 800270e:	f7fe f92f 	bl	8000970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	223d      	movs	r2, #61	; 0x3d
 8002716:	2102      	movs	r1, #2
 8002718:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3304      	adds	r3, #4
 8002722:	0019      	movs	r1, r3
 8002724:	0010      	movs	r0, r2
 8002726:	f000 fa13 	bl	8002b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2246      	movs	r2, #70	; 0x46
 800272e:	2101      	movs	r1, #1
 8002730:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	223e      	movs	r2, #62	; 0x3e
 8002736:	2101      	movs	r1, #1
 8002738:	5499      	strb	r1, [r3, r2]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	223f      	movs	r2, #63	; 0x3f
 800273e:	2101      	movs	r1, #1
 8002740:	5499      	strb	r1, [r3, r2]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2240      	movs	r2, #64	; 0x40
 8002746:	2101      	movs	r1, #1
 8002748:	5499      	strb	r1, [r3, r2]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2241      	movs	r2, #65	; 0x41
 800274e:	2101      	movs	r1, #1
 8002750:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2242      	movs	r2, #66	; 0x42
 8002756:	2101      	movs	r1, #1
 8002758:	5499      	strb	r1, [r3, r2]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2243      	movs	r2, #67	; 0x43
 800275e:	2101      	movs	r1, #1
 8002760:	5499      	strb	r1, [r3, r2]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2244      	movs	r2, #68	; 0x44
 8002766:	2101      	movs	r1, #1
 8002768:	5499      	strb	r1, [r3, r2]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2245      	movs	r2, #69	; 0x45
 800276e:	2101      	movs	r1, #1
 8002770:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	223d      	movs	r2, #61	; 0x3d
 8002776:	2101      	movs	r1, #1
 8002778:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	0018      	movs	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	b002      	add	sp, #8
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e090      	b.n	80028ba <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	223d      	movs	r2, #61	; 0x3d
 800279c:	5c9b      	ldrb	r3, [r3, r2]
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d107      	bne.n	80027b4 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	223c      	movs	r2, #60	; 0x3c
 80027a8:	2100      	movs	r1, #0
 80027aa:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	0018      	movs	r0, r3
 80027b0:	f7fe f888 	bl	80008c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	223d      	movs	r2, #61	; 0x3d
 80027b8:	2102      	movs	r1, #2
 80027ba:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	493f      	ldr	r1, [pc, #252]	; (80028c4 <HAL_TIM_Encoder_Init+0x140>)
 80027c8:	400a      	ands	r2, r1
 80027ca:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3304      	adds	r3, #4
 80027d4:	0019      	movs	r1, r3
 80027d6:	0010      	movs	r0, r2
 80027d8:	f000 f9ba 	bl	8002b50 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4a31      	ldr	r2, [pc, #196]	; (80028c8 <HAL_TIM_Encoder_Init+0x144>)
 8002802:	4013      	ands	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	021b      	lsls	r3, r3, #8
 8002810:	4313      	orrs	r3, r2
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	4a2c      	ldr	r2, [pc, #176]	; (80028cc <HAL_TIM_Encoder_Init+0x148>)
 800281c:	4013      	ands	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	4a2b      	ldr	r2, [pc, #172]	; (80028d0 <HAL_TIM_Encoder_Init+0x14c>)
 8002824:	4013      	ands	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	68da      	ldr	r2, [r3, #12]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	021b      	lsls	r3, r3, #8
 8002832:	4313      	orrs	r3, r2
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	4313      	orrs	r3, r2
 8002838:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	011a      	lsls	r2, r3, #4
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	031b      	lsls	r3, r3, #12
 8002846:	4313      	orrs	r3, r2
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2222      	movs	r2, #34	; 0x22
 8002852:	4393      	bics	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2288      	movs	r2, #136	; 0x88
 800285a:	4393      	bics	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	4313      	orrs	r3, r2
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	4313      	orrs	r3, r2
 800286e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2246      	movs	r2, #70	; 0x46
 800288c:	2101      	movs	r1, #1
 800288e:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	223e      	movs	r2, #62	; 0x3e
 8002894:	2101      	movs	r1, #1
 8002896:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	223f      	movs	r2, #63	; 0x3f
 800289c:	2101      	movs	r1, #1
 800289e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2242      	movs	r2, #66	; 0x42
 80028a4:	2101      	movs	r1, #1
 80028a6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2243      	movs	r2, #67	; 0x43
 80028ac:	2101      	movs	r1, #1
 80028ae:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	223d      	movs	r2, #61	; 0x3d
 80028b4:	2101      	movs	r1, #1
 80028b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	0018      	movs	r0, r3
 80028bc:	46bd      	mov	sp, r7
 80028be:	b006      	add	sp, #24
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	ffffbff8 	.word	0xffffbff8
 80028c8:	fffffcfc 	.word	0xfffffcfc
 80028cc:	fffff3f3 	.word	0xfffff3f3
 80028d0:	ffff0f0f 	.word	0xffff0f0f

080028d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	2202      	movs	r2, #2
 80028e4:	4013      	ands	r3, r2
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d124      	bne.n	8002934 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	2202      	movs	r2, #2
 80028f2:	4013      	ands	r3, r2
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d11d      	bne.n	8002934 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2203      	movs	r2, #3
 80028fe:	4252      	negs	r2, r2
 8002900:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	2203      	movs	r2, #3
 8002910:	4013      	ands	r3, r2
 8002912:	d004      	beq.n	800291e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	0018      	movs	r0, r3
 8002918:	f000 f902 	bl	8002b20 <HAL_TIM_IC_CaptureCallback>
 800291c:	e007      	b.n	800292e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	0018      	movs	r0, r3
 8002922:	f000 f8f5 	bl	8002b10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	0018      	movs	r0, r3
 800292a:	f000 f901 	bl	8002b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	2204      	movs	r2, #4
 800293c:	4013      	ands	r3, r2
 800293e:	2b04      	cmp	r3, #4
 8002940:	d125      	bne.n	800298e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	2204      	movs	r2, #4
 800294a:	4013      	ands	r3, r2
 800294c:	2b04      	cmp	r3, #4
 800294e:	d11e      	bne.n	800298e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2205      	movs	r2, #5
 8002956:	4252      	negs	r2, r2
 8002958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2202      	movs	r2, #2
 800295e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	699a      	ldr	r2, [r3, #24]
 8002966:	23c0      	movs	r3, #192	; 0xc0
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4013      	ands	r3, r2
 800296c:	d004      	beq.n	8002978 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	0018      	movs	r0, r3
 8002972:	f000 f8d5 	bl	8002b20 <HAL_TIM_IC_CaptureCallback>
 8002976:	e007      	b.n	8002988 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	0018      	movs	r0, r3
 800297c:	f000 f8c8 	bl	8002b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	0018      	movs	r0, r3
 8002984:	f000 f8d4 	bl	8002b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	2208      	movs	r2, #8
 8002996:	4013      	ands	r3, r2
 8002998:	2b08      	cmp	r3, #8
 800299a:	d124      	bne.n	80029e6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	2208      	movs	r2, #8
 80029a4:	4013      	ands	r3, r2
 80029a6:	2b08      	cmp	r3, #8
 80029a8:	d11d      	bne.n	80029e6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2209      	movs	r2, #9
 80029b0:	4252      	negs	r2, r2
 80029b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2204      	movs	r2, #4
 80029b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	2203      	movs	r2, #3
 80029c2:	4013      	ands	r3, r2
 80029c4:	d004      	beq.n	80029d0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	0018      	movs	r0, r3
 80029ca:	f000 f8a9 	bl	8002b20 <HAL_TIM_IC_CaptureCallback>
 80029ce:	e007      	b.n	80029e0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	0018      	movs	r0, r3
 80029d4:	f000 f89c 	bl	8002b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	0018      	movs	r0, r3
 80029dc:	f000 f8a8 	bl	8002b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	2210      	movs	r2, #16
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b10      	cmp	r3, #16
 80029f2:	d125      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	2210      	movs	r2, #16
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b10      	cmp	r3, #16
 8002a00:	d11e      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2211      	movs	r2, #17
 8002a08:	4252      	negs	r2, r2
 8002a0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2208      	movs	r2, #8
 8002a10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	69da      	ldr	r2, [r3, #28]
 8002a18:	23c0      	movs	r3, #192	; 0xc0
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	d004      	beq.n	8002a2a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	0018      	movs	r0, r3
 8002a24:	f000 f87c 	bl	8002b20 <HAL_TIM_IC_CaptureCallback>
 8002a28:	e007      	b.n	8002a3a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f000 f86f 	bl	8002b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	0018      	movs	r0, r3
 8002a36:	f000 f87b 	bl	8002b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	2201      	movs	r2, #1
 8002a48:	4013      	ands	r3, r2
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d10f      	bne.n	8002a6e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	2201      	movs	r2, #1
 8002a56:	4013      	ands	r3, r2
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d108      	bne.n	8002a6e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2202      	movs	r2, #2
 8002a62:	4252      	negs	r2, r2
 8002a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f000 f849 	bl	8002b00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	2280      	movs	r2, #128	; 0x80
 8002a76:	4013      	ands	r3, r2
 8002a78:	2b80      	cmp	r3, #128	; 0x80
 8002a7a:	d10f      	bne.n	8002a9c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	2280      	movs	r2, #128	; 0x80
 8002a84:	4013      	ands	r3, r2
 8002a86:	2b80      	cmp	r3, #128	; 0x80
 8002a88:	d108      	bne.n	8002a9c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2281      	movs	r2, #129	; 0x81
 8002a90:	4252      	negs	r2, r2
 8002a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	0018      	movs	r0, r3
 8002a98:	f000 f940 	bl	8002d1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	2240      	movs	r2, #64	; 0x40
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	2b40      	cmp	r3, #64	; 0x40
 8002aa8:	d10f      	bne.n	8002aca <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	2240      	movs	r2, #64	; 0x40
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	2b40      	cmp	r3, #64	; 0x40
 8002ab6:	d108      	bne.n	8002aca <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2241      	movs	r2, #65	; 0x41
 8002abe:	4252      	negs	r2, r2
 8002ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f000 f83b 	bl	8002b40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b20      	cmp	r3, #32
 8002ad6:	d10f      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	2b20      	cmp	r3, #32
 8002ae4:	d108      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2221      	movs	r2, #33	; 0x21
 8002aec:	4252      	negs	r2, r2
 8002aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	0018      	movs	r0, r3
 8002af4:	f000 f90a 	bl	8002d0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002af8:	46c0      	nop			; (mov r8, r8)
 8002afa:	46bd      	mov	sp, r7
 8002afc:	b002      	add	sp, #8
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002b08:	46c0      	nop			; (mov r8, r8)
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	b002      	add	sp, #8
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b18:	46c0      	nop			; (mov r8, r8)
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	b002      	add	sp, #8
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b28:	46c0      	nop			; (mov r8, r8)
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	b002      	add	sp, #8
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b38:	46c0      	nop			; (mov r8, r8)
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	b002      	add	sp, #8
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b48:	46c0      	nop			; (mov r8, r8)
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b002      	add	sp, #8
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a34      	ldr	r2, [pc, #208]	; (8002c34 <TIM_Base_SetConfig+0xe4>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d008      	beq.n	8002b7a <TIM_Base_SetConfig+0x2a>
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	2380      	movs	r3, #128	; 0x80
 8002b6c:	05db      	lsls	r3, r3, #23
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d003      	beq.n	8002b7a <TIM_Base_SetConfig+0x2a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a30      	ldr	r2, [pc, #192]	; (8002c38 <TIM_Base_SetConfig+0xe8>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d108      	bne.n	8002b8c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2270      	movs	r2, #112	; 0x70
 8002b7e:	4393      	bics	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a29      	ldr	r2, [pc, #164]	; (8002c34 <TIM_Base_SetConfig+0xe4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d018      	beq.n	8002bc6 <TIM_Base_SetConfig+0x76>
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	2380      	movs	r3, #128	; 0x80
 8002b98:	05db      	lsls	r3, r3, #23
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d013      	beq.n	8002bc6 <TIM_Base_SetConfig+0x76>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a25      	ldr	r2, [pc, #148]	; (8002c38 <TIM_Base_SetConfig+0xe8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d00f      	beq.n	8002bc6 <TIM_Base_SetConfig+0x76>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a24      	ldr	r2, [pc, #144]	; (8002c3c <TIM_Base_SetConfig+0xec>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d00b      	beq.n	8002bc6 <TIM_Base_SetConfig+0x76>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a23      	ldr	r2, [pc, #140]	; (8002c40 <TIM_Base_SetConfig+0xf0>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d007      	beq.n	8002bc6 <TIM_Base_SetConfig+0x76>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a22      	ldr	r2, [pc, #136]	; (8002c44 <TIM_Base_SetConfig+0xf4>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d003      	beq.n	8002bc6 <TIM_Base_SetConfig+0x76>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a21      	ldr	r2, [pc, #132]	; (8002c48 <TIM_Base_SetConfig+0xf8>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d108      	bne.n	8002bd8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4a20      	ldr	r2, [pc, #128]	; (8002c4c <TIM_Base_SetConfig+0xfc>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2280      	movs	r2, #128	; 0x80
 8002bdc:	4393      	bics	r3, r2
 8002bde:	001a      	movs	r2, r3
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a0c      	ldr	r2, [pc, #48]	; (8002c34 <TIM_Base_SetConfig+0xe4>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d00b      	beq.n	8002c1e <TIM_Base_SetConfig+0xce>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a0d      	ldr	r2, [pc, #52]	; (8002c40 <TIM_Base_SetConfig+0xf0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d007      	beq.n	8002c1e <TIM_Base_SetConfig+0xce>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a0c      	ldr	r2, [pc, #48]	; (8002c44 <TIM_Base_SetConfig+0xf4>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d003      	beq.n	8002c1e <TIM_Base_SetConfig+0xce>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a0b      	ldr	r2, [pc, #44]	; (8002c48 <TIM_Base_SetConfig+0xf8>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d103      	bne.n	8002c26 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	691a      	ldr	r2, [r3, #16]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	615a      	str	r2, [r3, #20]
}
 8002c2c:	46c0      	nop			; (mov r8, r8)
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	b004      	add	sp, #16
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40012c00 	.word	0x40012c00
 8002c38:	40000400 	.word	0x40000400
 8002c3c:	40002000 	.word	0x40002000
 8002c40:	40014000 	.word	0x40014000
 8002c44:	40014400 	.word	0x40014400
 8002c48:	40014800 	.word	0x40014800
 8002c4c:	fffffcff 	.word	0xfffffcff

08002c50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	223c      	movs	r2, #60	; 0x3c
 8002c5e:	5c9b      	ldrb	r3, [r3, r2]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d101      	bne.n	8002c68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c64:	2302      	movs	r3, #2
 8002c66:	e047      	b.n	8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	223c      	movs	r2, #60	; 0x3c
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	223d      	movs	r2, #61	; 0x3d
 8002c74:	2102      	movs	r1, #2
 8002c76:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2270      	movs	r2, #112	; 0x70
 8002c8c:	4393      	bics	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a16      	ldr	r2, [pc, #88]	; (8002d00 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d00f      	beq.n	8002ccc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	2380      	movs	r3, #128	; 0x80
 8002cb2:	05db      	lsls	r3, r3, #23
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d009      	beq.n	8002ccc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a11      	ldr	r2, [pc, #68]	; (8002d04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d004      	beq.n	8002ccc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a10      	ldr	r2, [pc, #64]	; (8002d08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d10c      	bne.n	8002ce6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2280      	movs	r2, #128	; 0x80
 8002cd0:	4393      	bics	r3, r2
 8002cd2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	223d      	movs	r2, #61	; 0x3d
 8002cea:	2101      	movs	r1, #1
 8002cec:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	223c      	movs	r2, #60	; 0x3c
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	b004      	add	sp, #16
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40012c00 	.word	0x40012c00
 8002d04:	40000400 	.word	0x40000400
 8002d08:	40014000 	.word	0x40014000

08002d0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d14:	46c0      	nop			; (mov r8, r8)
 8002d16:	46bd      	mov	sp, r7
 8002d18:	b002      	add	sp, #8
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d24:	46c0      	nop			; (mov r8, r8)
 8002d26:	46bd      	mov	sp, r7
 8002d28:	b002      	add	sp, #8
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e044      	b.n	8002dc8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d107      	bne.n	8002d56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2274      	movs	r2, #116	; 0x74
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	0018      	movs	r0, r3
 8002d52:	f7fd fe33 	bl	80009bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2224      	movs	r2, #36	; 0x24
 8002d5a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2101      	movs	r1, #1
 8002d68:	438a      	bics	r2, r1
 8002d6a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	0018      	movs	r0, r3
 8002d70:	f000 fb24 	bl	80033bc <UART_SetConfig>
 8002d74:	0003      	movs	r3, r0
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d101      	bne.n	8002d7e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e024      	b.n	8002dc8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f000 fc9f 	bl	80036cc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	490d      	ldr	r1, [pc, #52]	; (8002dd0 <HAL_UART_Init+0xa4>)
 8002d9a:	400a      	ands	r2, r1
 8002d9c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	212a      	movs	r1, #42	; 0x2a
 8002daa:	438a      	bics	r2, r1
 8002dac:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2101      	movs	r1, #1
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	f000 fd37 	bl	8003834 <UART_CheckIdleState>
 8002dc6:	0003      	movs	r3, r0
}
 8002dc8:	0018      	movs	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	b002      	add	sp, #8
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	ffffb7ff 	.word	0xffffb7ff

08002dd4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002dd4:	b590      	push	{r4, r7, lr}
 8002dd6:	b0ab      	sub	sp, #172	; 0xac
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	22a4      	movs	r2, #164	; 0xa4
 8002de4:	18b9      	adds	r1, r7, r2
 8002de6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	20a0      	movs	r0, #160	; 0xa0
 8002df0:	1839      	adds	r1, r7, r0
 8002df2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	219c      	movs	r1, #156	; 0x9c
 8002dfc:	1879      	adds	r1, r7, r1
 8002dfe:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e00:	0011      	movs	r1, r2
 8002e02:	18bb      	adds	r3, r7, r2
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a99      	ldr	r2, [pc, #612]	; (800306c <HAL_UART_IRQHandler+0x298>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2298      	movs	r2, #152	; 0x98
 8002e0c:	18bc      	adds	r4, r7, r2
 8002e0e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002e10:	18bb      	adds	r3, r7, r2
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d114      	bne.n	8002e42 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e18:	187b      	adds	r3, r7, r1
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d00f      	beq.n	8002e42 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e22:	183b      	adds	r3, r7, r0
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2220      	movs	r2, #32
 8002e28:	4013      	ands	r3, r2
 8002e2a:	d00a      	beq.n	8002e42 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d100      	bne.n	8002e36 <HAL_UART_IRQHandler+0x62>
 8002e34:	e296      	b.n	8003364 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	0010      	movs	r0, r2
 8002e3e:	4798      	blx	r3
      }
      return;
 8002e40:	e290      	b.n	8003364 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002e42:	2398      	movs	r3, #152	; 0x98
 8002e44:	18fb      	adds	r3, r7, r3
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d100      	bne.n	8002e4e <HAL_UART_IRQHandler+0x7a>
 8002e4c:	e114      	b.n	8003078 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002e4e:	239c      	movs	r3, #156	; 0x9c
 8002e50:	18fb      	adds	r3, r7, r3
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2201      	movs	r2, #1
 8002e56:	4013      	ands	r3, r2
 8002e58:	d106      	bne.n	8002e68 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002e5a:	23a0      	movs	r3, #160	; 0xa0
 8002e5c:	18fb      	adds	r3, r7, r3
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a83      	ldr	r2, [pc, #524]	; (8003070 <HAL_UART_IRQHandler+0x29c>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	d100      	bne.n	8002e68 <HAL_UART_IRQHandler+0x94>
 8002e66:	e107      	b.n	8003078 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e68:	23a4      	movs	r3, #164	; 0xa4
 8002e6a:	18fb      	adds	r3, r7, r3
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	4013      	ands	r3, r2
 8002e72:	d012      	beq.n	8002e9a <HAL_UART_IRQHandler+0xc6>
 8002e74:	23a0      	movs	r3, #160	; 0xa0
 8002e76:	18fb      	adds	r3, r7, r3
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	2380      	movs	r3, #128	; 0x80
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d00b      	beq.n	8002e9a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2201      	movs	r2, #1
 8002e88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2280      	movs	r2, #128	; 0x80
 8002e8e:	589b      	ldr	r3, [r3, r2]
 8002e90:	2201      	movs	r2, #1
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2180      	movs	r1, #128	; 0x80
 8002e98:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e9a:	23a4      	movs	r3, #164	; 0xa4
 8002e9c:	18fb      	adds	r3, r7, r3
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d011      	beq.n	8002eca <HAL_UART_IRQHandler+0xf6>
 8002ea6:	239c      	movs	r3, #156	; 0x9c
 8002ea8:	18fb      	adds	r3, r7, r3
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2201      	movs	r2, #1
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d00b      	beq.n	8002eca <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2280      	movs	r2, #128	; 0x80
 8002ebe:	589b      	ldr	r3, [r3, r2]
 8002ec0:	2204      	movs	r2, #4
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2180      	movs	r1, #128	; 0x80
 8002ec8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002eca:	23a4      	movs	r3, #164	; 0xa4
 8002ecc:	18fb      	adds	r3, r7, r3
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2204      	movs	r2, #4
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	d011      	beq.n	8002efa <HAL_UART_IRQHandler+0x126>
 8002ed6:	239c      	movs	r3, #156	; 0x9c
 8002ed8:	18fb      	adds	r3, r7, r3
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2201      	movs	r2, #1
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d00b      	beq.n	8002efa <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2204      	movs	r2, #4
 8002ee8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2280      	movs	r2, #128	; 0x80
 8002eee:	589b      	ldr	r3, [r3, r2]
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2180      	movs	r1, #128	; 0x80
 8002ef8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002efa:	23a4      	movs	r3, #164	; 0xa4
 8002efc:	18fb      	adds	r3, r7, r3
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2208      	movs	r2, #8
 8002f02:	4013      	ands	r3, r2
 8002f04:	d017      	beq.n	8002f36 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f06:	23a0      	movs	r3, #160	; 0xa0
 8002f08:	18fb      	adds	r3, r7, r3
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	4013      	ands	r3, r2
 8002f10:	d105      	bne.n	8002f1e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002f12:	239c      	movs	r3, #156	; 0x9c
 8002f14:	18fb      	adds	r3, r7, r3
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f1c:	d00b      	beq.n	8002f36 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2208      	movs	r2, #8
 8002f24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2280      	movs	r2, #128	; 0x80
 8002f2a:	589b      	ldr	r3, [r3, r2]
 8002f2c:	2208      	movs	r2, #8
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2180      	movs	r1, #128	; 0x80
 8002f34:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f36:	23a4      	movs	r3, #164	; 0xa4
 8002f38:	18fb      	adds	r3, r7, r3
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	2380      	movs	r3, #128	; 0x80
 8002f3e:	011b      	lsls	r3, r3, #4
 8002f40:	4013      	ands	r3, r2
 8002f42:	d013      	beq.n	8002f6c <HAL_UART_IRQHandler+0x198>
 8002f44:	23a0      	movs	r3, #160	; 0xa0
 8002f46:	18fb      	adds	r3, r7, r3
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	2380      	movs	r3, #128	; 0x80
 8002f4c:	04db      	lsls	r3, r3, #19
 8002f4e:	4013      	ands	r3, r2
 8002f50:	d00c      	beq.n	8002f6c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2280      	movs	r2, #128	; 0x80
 8002f58:	0112      	lsls	r2, r2, #4
 8002f5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2280      	movs	r2, #128	; 0x80
 8002f60:	589b      	ldr	r3, [r3, r2]
 8002f62:	2220      	movs	r2, #32
 8002f64:	431a      	orrs	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2180      	movs	r1, #128	; 0x80
 8002f6a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2280      	movs	r2, #128	; 0x80
 8002f70:	589b      	ldr	r3, [r3, r2]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d100      	bne.n	8002f78 <HAL_UART_IRQHandler+0x1a4>
 8002f76:	e1f7      	b.n	8003368 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f78:	23a4      	movs	r3, #164	; 0xa4
 8002f7a:	18fb      	adds	r3, r7, r3
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	4013      	ands	r3, r2
 8002f82:	d00e      	beq.n	8002fa2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f84:	23a0      	movs	r3, #160	; 0xa0
 8002f86:	18fb      	adds	r3, r7, r3
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d008      	beq.n	8002fa2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d004      	beq.n	8002fa2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	0010      	movs	r0, r2
 8002fa0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2280      	movs	r2, #128	; 0x80
 8002fa6:	589b      	ldr	r3, [r3, r2]
 8002fa8:	2194      	movs	r1, #148	; 0x94
 8002faa:	187a      	adds	r2, r7, r1
 8002fac:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	2240      	movs	r2, #64	; 0x40
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b40      	cmp	r3, #64	; 0x40
 8002fba:	d004      	beq.n	8002fc6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002fbc:	187b      	adds	r3, r7, r1
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2228      	movs	r2, #40	; 0x28
 8002fc2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fc4:	d047      	beq.n	8003056 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f000 fd3f 	bl	8003a4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2240      	movs	r2, #64	; 0x40
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2b40      	cmp	r3, #64	; 0x40
 8002fda:	d137      	bne.n	800304c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fdc:	f3ef 8310 	mrs	r3, PRIMASK
 8002fe0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002fe2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fe4:	2090      	movs	r0, #144	; 0x90
 8002fe6:	183a      	adds	r2, r7, r0
 8002fe8:	6013      	str	r3, [r2, #0]
 8002fea:	2301      	movs	r3, #1
 8002fec:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ff0:	f383 8810 	msr	PRIMASK, r3
}
 8002ff4:	46c0      	nop			; (mov r8, r8)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2140      	movs	r1, #64	; 0x40
 8003002:	438a      	bics	r2, r1
 8003004:	609a      	str	r2, [r3, #8]
 8003006:	183b      	adds	r3, r7, r0
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800300c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800300e:	f383 8810 	msr	PRIMASK, r3
}
 8003012:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003018:	2b00      	cmp	r3, #0
 800301a:	d012      	beq.n	8003042 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003020:	4a14      	ldr	r2, [pc, #80]	; (8003074 <HAL_UART_IRQHandler+0x2a0>)
 8003022:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003028:	0018      	movs	r0, r3
 800302a:	f7fd ff33 	bl	8000e94 <HAL_DMA_Abort_IT>
 800302e:	1e03      	subs	r3, r0, #0
 8003030:	d01a      	beq.n	8003068 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303c:	0018      	movs	r0, r3
 800303e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003040:	e012      	b.n	8003068 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	0018      	movs	r0, r3
 8003046:	f000 f9a5 	bl	8003394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800304a:	e00d      	b.n	8003068 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	0018      	movs	r0, r3
 8003050:	f000 f9a0 	bl	8003394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003054:	e008      	b.n	8003068 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	0018      	movs	r0, r3
 800305a:	f000 f99b 	bl	8003394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2280      	movs	r2, #128	; 0x80
 8003062:	2100      	movs	r1, #0
 8003064:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003066:	e17f      	b.n	8003368 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003068:	46c0      	nop			; (mov r8, r8)
    return;
 800306a:	e17d      	b.n	8003368 <HAL_UART_IRQHandler+0x594>
 800306c:	0000080f 	.word	0x0000080f
 8003070:	04000120 	.word	0x04000120
 8003074:	08003b11 	.word	0x08003b11

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800307c:	2b01      	cmp	r3, #1
 800307e:	d000      	beq.n	8003082 <HAL_UART_IRQHandler+0x2ae>
 8003080:	e131      	b.n	80032e6 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003082:	23a4      	movs	r3, #164	; 0xa4
 8003084:	18fb      	adds	r3, r7, r3
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2210      	movs	r2, #16
 800308a:	4013      	ands	r3, r2
 800308c:	d100      	bne.n	8003090 <HAL_UART_IRQHandler+0x2bc>
 800308e:	e12a      	b.n	80032e6 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003090:	23a0      	movs	r3, #160	; 0xa0
 8003092:	18fb      	adds	r3, r7, r3
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2210      	movs	r2, #16
 8003098:	4013      	ands	r3, r2
 800309a:	d100      	bne.n	800309e <HAL_UART_IRQHandler+0x2ca>
 800309c:	e123      	b.n	80032e6 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2210      	movs	r2, #16
 80030a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	2240      	movs	r2, #64	; 0x40
 80030ae:	4013      	ands	r3, r2
 80030b0:	2b40      	cmp	r3, #64	; 0x40
 80030b2:	d000      	beq.n	80030b6 <HAL_UART_IRQHandler+0x2e2>
 80030b4:	e09b      	b.n	80031ee <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	217e      	movs	r1, #126	; 0x7e
 80030c0:	187b      	adds	r3, r7, r1
 80030c2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80030c4:	187b      	adds	r3, r7, r1
 80030c6:	881b      	ldrh	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d100      	bne.n	80030ce <HAL_UART_IRQHandler+0x2fa>
 80030cc:	e14e      	b.n	800336c <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2258      	movs	r2, #88	; 0x58
 80030d2:	5a9b      	ldrh	r3, [r3, r2]
 80030d4:	187a      	adds	r2, r7, r1
 80030d6:	8812      	ldrh	r2, [r2, #0]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d300      	bcc.n	80030de <HAL_UART_IRQHandler+0x30a>
 80030dc:	e146      	b.n	800336c <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	187a      	adds	r2, r7, r1
 80030e2:	215a      	movs	r1, #90	; 0x5a
 80030e4:	8812      	ldrh	r2, [r2, #0]
 80030e6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	2b20      	cmp	r3, #32
 80030f0:	d06e      	beq.n	80031d0 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030f2:	f3ef 8310 	mrs	r3, PRIMASK
 80030f6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80030f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80030fc:	2301      	movs	r3, #1
 80030fe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003102:	f383 8810 	msr	PRIMASK, r3
}
 8003106:	46c0      	nop			; (mov r8, r8)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	499a      	ldr	r1, [pc, #616]	; (800337c <HAL_UART_IRQHandler+0x5a8>)
 8003114:	400a      	ands	r2, r1
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800311a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800311c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800311e:	f383 8810 	msr	PRIMASK, r3
}
 8003122:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003124:	f3ef 8310 	mrs	r3, PRIMASK
 8003128:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800312a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800312c:	677b      	str	r3, [r7, #116]	; 0x74
 800312e:	2301      	movs	r3, #1
 8003130:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003134:	f383 8810 	msr	PRIMASK, r3
}
 8003138:	46c0      	nop			; (mov r8, r8)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2101      	movs	r1, #1
 8003146:	438a      	bics	r2, r1
 8003148:	609a      	str	r2, [r3, #8]
 800314a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800314c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800314e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003150:	f383 8810 	msr	PRIMASK, r3
}
 8003154:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003156:	f3ef 8310 	mrs	r3, PRIMASK
 800315a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800315c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800315e:	673b      	str	r3, [r7, #112]	; 0x70
 8003160:	2301      	movs	r3, #1
 8003162:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003166:	f383 8810 	msr	PRIMASK, r3
}
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2140      	movs	r1, #64	; 0x40
 8003178:	438a      	bics	r2, r1
 800317a:	609a      	str	r2, [r3, #8]
 800317c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800317e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003182:	f383 8810 	msr	PRIMASK, r3
}
 8003186:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2220      	movs	r2, #32
 800318c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003194:	f3ef 8310 	mrs	r3, PRIMASK
 8003198:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800319a:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800319c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800319e:	2301      	movs	r3, #1
 80031a0:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031a4:	f383 8810 	msr	PRIMASK, r3
}
 80031a8:	46c0      	nop			; (mov r8, r8)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2110      	movs	r1, #16
 80031b6:	438a      	bics	r2, r1
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031c0:	f383 8810 	msr	PRIMASK, r3
}
 80031c4:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ca:	0018      	movs	r0, r3
 80031cc:	f7fd fe2a 	bl	8000e24 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2258      	movs	r2, #88	; 0x58
 80031d4:	5a9a      	ldrh	r2, [r3, r2]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	215a      	movs	r1, #90	; 0x5a
 80031da:	5a5b      	ldrh	r3, [r3, r1]
 80031dc:	b29b      	uxth	r3, r3
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	0011      	movs	r1, r2
 80031e6:	0018      	movs	r0, r3
 80031e8:	f000 f8dc 	bl	80033a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80031ec:	e0be      	b.n	800336c <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2258      	movs	r2, #88	; 0x58
 80031f2:	5a99      	ldrh	r1, [r3, r2]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	225a      	movs	r2, #90	; 0x5a
 80031f8:	5a9b      	ldrh	r3, [r3, r2]
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	208e      	movs	r0, #142	; 0x8e
 80031fe:	183b      	adds	r3, r7, r0
 8003200:	1a8a      	subs	r2, r1, r2
 8003202:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	225a      	movs	r2, #90	; 0x5a
 8003208:	5a9b      	ldrh	r3, [r3, r2]
 800320a:	b29b      	uxth	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d100      	bne.n	8003212 <HAL_UART_IRQHandler+0x43e>
 8003210:	e0ae      	b.n	8003370 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8003212:	183b      	adds	r3, r7, r0
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d100      	bne.n	800321c <HAL_UART_IRQHandler+0x448>
 800321a:	e0a9      	b.n	8003370 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800321c:	f3ef 8310 	mrs	r3, PRIMASK
 8003220:	60fb      	str	r3, [r7, #12]
  return(result);
 8003222:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003224:	2488      	movs	r4, #136	; 0x88
 8003226:	193a      	adds	r2, r7, r4
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	2301      	movs	r3, #1
 800322c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	f383 8810 	msr	PRIMASK, r3
}
 8003234:	46c0      	nop			; (mov r8, r8)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	494f      	ldr	r1, [pc, #316]	; (8003380 <HAL_UART_IRQHandler+0x5ac>)
 8003242:	400a      	ands	r2, r1
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	193b      	adds	r3, r7, r4
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f383 8810 	msr	PRIMASK, r3
}
 8003252:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003254:	f3ef 8310 	mrs	r3, PRIMASK
 8003258:	61bb      	str	r3, [r7, #24]
  return(result);
 800325a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800325c:	2484      	movs	r4, #132	; 0x84
 800325e:	193a      	adds	r2, r7, r4
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	2301      	movs	r3, #1
 8003264:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	f383 8810 	msr	PRIMASK, r3
}
 800326c:	46c0      	nop			; (mov r8, r8)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2101      	movs	r1, #1
 800327a:	438a      	bics	r2, r1
 800327c:	609a      	str	r2, [r3, #8]
 800327e:	193b      	adds	r3, r7, r4
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003284:	6a3b      	ldr	r3, [r7, #32]
 8003286:	f383 8810 	msr	PRIMASK, r3
}
 800328a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2220      	movs	r2, #32
 8003290:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800329e:	f3ef 8310 	mrs	r3, PRIMASK
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032a6:	2480      	movs	r4, #128	; 0x80
 80032a8:	193a      	adds	r2, r7, r4
 80032aa:	6013      	str	r3, [r2, #0]
 80032ac:	2301      	movs	r3, #1
 80032ae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b2:	f383 8810 	msr	PRIMASK, r3
}
 80032b6:	46c0      	nop			; (mov r8, r8)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2110      	movs	r1, #16
 80032c4:	438a      	bics	r2, r1
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	193b      	adds	r3, r7, r4
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d0:	f383 8810 	msr	PRIMASK, r3
}
 80032d4:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032d6:	183b      	adds	r3, r7, r0
 80032d8:	881a      	ldrh	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	0011      	movs	r1, r2
 80032de:	0018      	movs	r0, r3
 80032e0:	f000 f860 	bl	80033a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80032e4:	e044      	b.n	8003370 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80032e6:	23a4      	movs	r3, #164	; 0xa4
 80032e8:	18fb      	adds	r3, r7, r3
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	2380      	movs	r3, #128	; 0x80
 80032ee:	035b      	lsls	r3, r3, #13
 80032f0:	4013      	ands	r3, r2
 80032f2:	d010      	beq.n	8003316 <HAL_UART_IRQHandler+0x542>
 80032f4:	239c      	movs	r3, #156	; 0x9c
 80032f6:	18fb      	adds	r3, r7, r3
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	2380      	movs	r3, #128	; 0x80
 80032fc:	03db      	lsls	r3, r3, #15
 80032fe:	4013      	ands	r3, r2
 8003300:	d009      	beq.n	8003316 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2280      	movs	r2, #128	; 0x80
 8003308:	0352      	lsls	r2, r2, #13
 800330a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	0018      	movs	r0, r3
 8003310:	f000 fc40 	bl	8003b94 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003314:	e02f      	b.n	8003376 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003316:	23a4      	movs	r3, #164	; 0xa4
 8003318:	18fb      	adds	r3, r7, r3
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2280      	movs	r2, #128	; 0x80
 800331e:	4013      	ands	r3, r2
 8003320:	d00f      	beq.n	8003342 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003322:	23a0      	movs	r3, #160	; 0xa0
 8003324:	18fb      	adds	r3, r7, r3
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2280      	movs	r2, #128	; 0x80
 800332a:	4013      	ands	r3, r2
 800332c:	d009      	beq.n	8003342 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003332:	2b00      	cmp	r3, #0
 8003334:	d01e      	beq.n	8003374 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	0010      	movs	r0, r2
 800333e:	4798      	blx	r3
    }
    return;
 8003340:	e018      	b.n	8003374 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003342:	23a4      	movs	r3, #164	; 0xa4
 8003344:	18fb      	adds	r3, r7, r3
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2240      	movs	r2, #64	; 0x40
 800334a:	4013      	ands	r3, r2
 800334c:	d013      	beq.n	8003376 <HAL_UART_IRQHandler+0x5a2>
 800334e:	23a0      	movs	r3, #160	; 0xa0
 8003350:	18fb      	adds	r3, r7, r3
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2240      	movs	r2, #64	; 0x40
 8003356:	4013      	ands	r3, r2
 8003358:	d00d      	beq.n	8003376 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	0018      	movs	r0, r3
 800335e:	f000 fbee 	bl	8003b3e <UART_EndTransmit_IT>
    return;
 8003362:	e008      	b.n	8003376 <HAL_UART_IRQHandler+0x5a2>
      return;
 8003364:	46c0      	nop			; (mov r8, r8)
 8003366:	e006      	b.n	8003376 <HAL_UART_IRQHandler+0x5a2>
    return;
 8003368:	46c0      	nop			; (mov r8, r8)
 800336a:	e004      	b.n	8003376 <HAL_UART_IRQHandler+0x5a2>
      return;
 800336c:	46c0      	nop			; (mov r8, r8)
 800336e:	e002      	b.n	8003376 <HAL_UART_IRQHandler+0x5a2>
      return;
 8003370:	46c0      	nop			; (mov r8, r8)
 8003372:	e000      	b.n	8003376 <HAL_UART_IRQHandler+0x5a2>
    return;
 8003374:	46c0      	nop			; (mov r8, r8)
  }

}
 8003376:	46bd      	mov	sp, r7
 8003378:	b02b      	add	sp, #172	; 0xac
 800337a:	bd90      	pop	{r4, r7, pc}
 800337c:	fffffeff 	.word	0xfffffeff
 8003380:	fffffedf 	.word	0xfffffedf

08003384 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800338c:	46c0      	nop			; (mov r8, r8)
 800338e:	46bd      	mov	sp, r7
 8003390:	b002      	add	sp, #8
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800339c:	46c0      	nop			; (mov r8, r8)
 800339e:	46bd      	mov	sp, r7
 80033a0:	b002      	add	sp, #8
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	000a      	movs	r2, r1
 80033ae:	1cbb      	adds	r3, r7, #2
 80033b0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	46bd      	mov	sp, r7
 80033b6:	b002      	add	sp, #8
 80033b8:	bd80      	pop	{r7, pc}
	...

080033bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b088      	sub	sp, #32
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033c4:	231e      	movs	r3, #30
 80033c6:	18fb      	adds	r3, r7, r3
 80033c8:	2200      	movs	r2, #0
 80033ca:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	431a      	orrs	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4aaf      	ldr	r2, [pc, #700]	; (80036a8 <UART_SetConfig+0x2ec>)
 80033ec:	4013      	ands	r3, r2
 80033ee:	0019      	movs	r1, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	4aaa      	ldr	r2, [pc, #680]	; (80036ac <UART_SetConfig+0x2f0>)
 8003402:	4013      	ands	r3, r2
 8003404:	0019      	movs	r1, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68da      	ldr	r2, [r3, #12]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	4313      	orrs	r3, r2
 8003420:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	4aa1      	ldr	r2, [pc, #644]	; (80036b0 <UART_SetConfig+0x2f4>)
 800342a:	4013      	ands	r3, r2
 800342c:	0019      	movs	r1, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	430a      	orrs	r2, r1
 8003436:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a9d      	ldr	r2, [pc, #628]	; (80036b4 <UART_SetConfig+0x2f8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d127      	bne.n	8003492 <UART_SetConfig+0xd6>
 8003442:	4b9d      	ldr	r3, [pc, #628]	; (80036b8 <UART_SetConfig+0x2fc>)
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	2203      	movs	r2, #3
 8003448:	4013      	ands	r3, r2
 800344a:	2b03      	cmp	r3, #3
 800344c:	d00d      	beq.n	800346a <UART_SetConfig+0xae>
 800344e:	d81b      	bhi.n	8003488 <UART_SetConfig+0xcc>
 8003450:	2b02      	cmp	r3, #2
 8003452:	d014      	beq.n	800347e <UART_SetConfig+0xc2>
 8003454:	d818      	bhi.n	8003488 <UART_SetConfig+0xcc>
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <UART_SetConfig+0xa4>
 800345a:	2b01      	cmp	r3, #1
 800345c:	d00a      	beq.n	8003474 <UART_SetConfig+0xb8>
 800345e:	e013      	b.n	8003488 <UART_SetConfig+0xcc>
 8003460:	231f      	movs	r3, #31
 8003462:	18fb      	adds	r3, r7, r3
 8003464:	2200      	movs	r2, #0
 8003466:	701a      	strb	r2, [r3, #0]
 8003468:	e065      	b.n	8003536 <UART_SetConfig+0x17a>
 800346a:	231f      	movs	r3, #31
 800346c:	18fb      	adds	r3, r7, r3
 800346e:	2202      	movs	r2, #2
 8003470:	701a      	strb	r2, [r3, #0]
 8003472:	e060      	b.n	8003536 <UART_SetConfig+0x17a>
 8003474:	231f      	movs	r3, #31
 8003476:	18fb      	adds	r3, r7, r3
 8003478:	2204      	movs	r2, #4
 800347a:	701a      	strb	r2, [r3, #0]
 800347c:	e05b      	b.n	8003536 <UART_SetConfig+0x17a>
 800347e:	231f      	movs	r3, #31
 8003480:	18fb      	adds	r3, r7, r3
 8003482:	2208      	movs	r2, #8
 8003484:	701a      	strb	r2, [r3, #0]
 8003486:	e056      	b.n	8003536 <UART_SetConfig+0x17a>
 8003488:	231f      	movs	r3, #31
 800348a:	18fb      	adds	r3, r7, r3
 800348c:	2210      	movs	r2, #16
 800348e:	701a      	strb	r2, [r3, #0]
 8003490:	e051      	b.n	8003536 <UART_SetConfig+0x17a>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a89      	ldr	r2, [pc, #548]	; (80036bc <UART_SetConfig+0x300>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d134      	bne.n	8003506 <UART_SetConfig+0x14a>
 800349c:	4b86      	ldr	r3, [pc, #536]	; (80036b8 <UART_SetConfig+0x2fc>)
 800349e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034a0:	23c0      	movs	r3, #192	; 0xc0
 80034a2:	029b      	lsls	r3, r3, #10
 80034a4:	4013      	ands	r3, r2
 80034a6:	22c0      	movs	r2, #192	; 0xc0
 80034a8:	0292      	lsls	r2, r2, #10
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d017      	beq.n	80034de <UART_SetConfig+0x122>
 80034ae:	22c0      	movs	r2, #192	; 0xc0
 80034b0:	0292      	lsls	r2, r2, #10
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d822      	bhi.n	80034fc <UART_SetConfig+0x140>
 80034b6:	2280      	movs	r2, #128	; 0x80
 80034b8:	0292      	lsls	r2, r2, #10
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d019      	beq.n	80034f2 <UART_SetConfig+0x136>
 80034be:	2280      	movs	r2, #128	; 0x80
 80034c0:	0292      	lsls	r2, r2, #10
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d81a      	bhi.n	80034fc <UART_SetConfig+0x140>
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d004      	beq.n	80034d4 <UART_SetConfig+0x118>
 80034ca:	2280      	movs	r2, #128	; 0x80
 80034cc:	0252      	lsls	r2, r2, #9
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d00a      	beq.n	80034e8 <UART_SetConfig+0x12c>
 80034d2:	e013      	b.n	80034fc <UART_SetConfig+0x140>
 80034d4:	231f      	movs	r3, #31
 80034d6:	18fb      	adds	r3, r7, r3
 80034d8:	2200      	movs	r2, #0
 80034da:	701a      	strb	r2, [r3, #0]
 80034dc:	e02b      	b.n	8003536 <UART_SetConfig+0x17a>
 80034de:	231f      	movs	r3, #31
 80034e0:	18fb      	adds	r3, r7, r3
 80034e2:	2202      	movs	r2, #2
 80034e4:	701a      	strb	r2, [r3, #0]
 80034e6:	e026      	b.n	8003536 <UART_SetConfig+0x17a>
 80034e8:	231f      	movs	r3, #31
 80034ea:	18fb      	adds	r3, r7, r3
 80034ec:	2204      	movs	r2, #4
 80034ee:	701a      	strb	r2, [r3, #0]
 80034f0:	e021      	b.n	8003536 <UART_SetConfig+0x17a>
 80034f2:	231f      	movs	r3, #31
 80034f4:	18fb      	adds	r3, r7, r3
 80034f6:	2208      	movs	r2, #8
 80034f8:	701a      	strb	r2, [r3, #0]
 80034fa:	e01c      	b.n	8003536 <UART_SetConfig+0x17a>
 80034fc:	231f      	movs	r3, #31
 80034fe:	18fb      	adds	r3, r7, r3
 8003500:	2210      	movs	r2, #16
 8003502:	701a      	strb	r2, [r3, #0]
 8003504:	e017      	b.n	8003536 <UART_SetConfig+0x17a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a6d      	ldr	r2, [pc, #436]	; (80036c0 <UART_SetConfig+0x304>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d104      	bne.n	800351a <UART_SetConfig+0x15e>
 8003510:	231f      	movs	r3, #31
 8003512:	18fb      	adds	r3, r7, r3
 8003514:	2200      	movs	r2, #0
 8003516:	701a      	strb	r2, [r3, #0]
 8003518:	e00d      	b.n	8003536 <UART_SetConfig+0x17a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a69      	ldr	r2, [pc, #420]	; (80036c4 <UART_SetConfig+0x308>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d104      	bne.n	800352e <UART_SetConfig+0x172>
 8003524:	231f      	movs	r3, #31
 8003526:	18fb      	adds	r3, r7, r3
 8003528:	2200      	movs	r2, #0
 800352a:	701a      	strb	r2, [r3, #0]
 800352c:	e003      	b.n	8003536 <UART_SetConfig+0x17a>
 800352e:	231f      	movs	r3, #31
 8003530:	18fb      	adds	r3, r7, r3
 8003532:	2210      	movs	r2, #16
 8003534:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69da      	ldr	r2, [r3, #28]
 800353a:	2380      	movs	r3, #128	; 0x80
 800353c:	021b      	lsls	r3, r3, #8
 800353e:	429a      	cmp	r2, r3
 8003540:	d15d      	bne.n	80035fe <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8003542:	231f      	movs	r3, #31
 8003544:	18fb      	adds	r3, r7, r3
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b08      	cmp	r3, #8
 800354a:	d015      	beq.n	8003578 <UART_SetConfig+0x1bc>
 800354c:	dc18      	bgt.n	8003580 <UART_SetConfig+0x1c4>
 800354e:	2b04      	cmp	r3, #4
 8003550:	d00d      	beq.n	800356e <UART_SetConfig+0x1b2>
 8003552:	dc15      	bgt.n	8003580 <UART_SetConfig+0x1c4>
 8003554:	2b00      	cmp	r3, #0
 8003556:	d002      	beq.n	800355e <UART_SetConfig+0x1a2>
 8003558:	2b02      	cmp	r3, #2
 800355a:	d005      	beq.n	8003568 <UART_SetConfig+0x1ac>
 800355c:	e010      	b.n	8003580 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800355e:	f7fe fb6d 	bl	8001c3c <HAL_RCC_GetPCLK1Freq>
 8003562:	0003      	movs	r3, r0
 8003564:	61bb      	str	r3, [r7, #24]
        break;
 8003566:	e012      	b.n	800358e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003568:	4b57      	ldr	r3, [pc, #348]	; (80036c8 <UART_SetConfig+0x30c>)
 800356a:	61bb      	str	r3, [r7, #24]
        break;
 800356c:	e00f      	b.n	800358e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800356e:	f7fe fadb 	bl	8001b28 <HAL_RCC_GetSysClockFreq>
 8003572:	0003      	movs	r3, r0
 8003574:	61bb      	str	r3, [r7, #24]
        break;
 8003576:	e00a      	b.n	800358e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003578:	2380      	movs	r3, #128	; 0x80
 800357a:	021b      	lsls	r3, r3, #8
 800357c:	61bb      	str	r3, [r7, #24]
        break;
 800357e:	e006      	b.n	800358e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003584:	231e      	movs	r3, #30
 8003586:	18fb      	adds	r3, r7, r3
 8003588:	2201      	movs	r2, #1
 800358a:	701a      	strb	r2, [r3, #0]
        break;
 800358c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d100      	bne.n	8003596 <UART_SetConfig+0x1da>
 8003594:	e07b      	b.n	800368e <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	005a      	lsls	r2, r3, #1
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	085b      	lsrs	r3, r3, #1
 80035a0:	18d2      	adds	r2, r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	0019      	movs	r1, r3
 80035a8:	0010      	movs	r0, r2
 80035aa:	f7fc fdad 	bl	8000108 <__udivsi3>
 80035ae:	0003      	movs	r3, r0
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	2b0f      	cmp	r3, #15
 80035b8:	d91c      	bls.n	80035f4 <UART_SetConfig+0x238>
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	2380      	movs	r3, #128	; 0x80
 80035be:	025b      	lsls	r3, r3, #9
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d217      	bcs.n	80035f4 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	200e      	movs	r0, #14
 80035ca:	183b      	adds	r3, r7, r0
 80035cc:	210f      	movs	r1, #15
 80035ce:	438a      	bics	r2, r1
 80035d0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	085b      	lsrs	r3, r3, #1
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	2207      	movs	r2, #7
 80035da:	4013      	ands	r3, r2
 80035dc:	b299      	uxth	r1, r3
 80035de:	183b      	adds	r3, r7, r0
 80035e0:	183a      	adds	r2, r7, r0
 80035e2:	8812      	ldrh	r2, [r2, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	183a      	adds	r2, r7, r0
 80035ee:	8812      	ldrh	r2, [r2, #0]
 80035f0:	60da      	str	r2, [r3, #12]
 80035f2:	e04c      	b.n	800368e <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80035f4:	231e      	movs	r3, #30
 80035f6:	18fb      	adds	r3, r7, r3
 80035f8:	2201      	movs	r2, #1
 80035fa:	701a      	strb	r2, [r3, #0]
 80035fc:	e047      	b.n	800368e <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035fe:	231f      	movs	r3, #31
 8003600:	18fb      	adds	r3, r7, r3
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	2b08      	cmp	r3, #8
 8003606:	d015      	beq.n	8003634 <UART_SetConfig+0x278>
 8003608:	dc18      	bgt.n	800363c <UART_SetConfig+0x280>
 800360a:	2b04      	cmp	r3, #4
 800360c:	d00d      	beq.n	800362a <UART_SetConfig+0x26e>
 800360e:	dc15      	bgt.n	800363c <UART_SetConfig+0x280>
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <UART_SetConfig+0x25e>
 8003614:	2b02      	cmp	r3, #2
 8003616:	d005      	beq.n	8003624 <UART_SetConfig+0x268>
 8003618:	e010      	b.n	800363c <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800361a:	f7fe fb0f 	bl	8001c3c <HAL_RCC_GetPCLK1Freq>
 800361e:	0003      	movs	r3, r0
 8003620:	61bb      	str	r3, [r7, #24]
        break;
 8003622:	e012      	b.n	800364a <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003624:	4b28      	ldr	r3, [pc, #160]	; (80036c8 <UART_SetConfig+0x30c>)
 8003626:	61bb      	str	r3, [r7, #24]
        break;
 8003628:	e00f      	b.n	800364a <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800362a:	f7fe fa7d 	bl	8001b28 <HAL_RCC_GetSysClockFreq>
 800362e:	0003      	movs	r3, r0
 8003630:	61bb      	str	r3, [r7, #24]
        break;
 8003632:	e00a      	b.n	800364a <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003634:	2380      	movs	r3, #128	; 0x80
 8003636:	021b      	lsls	r3, r3, #8
 8003638:	61bb      	str	r3, [r7, #24]
        break;
 800363a:	e006      	b.n	800364a <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 800363c:	2300      	movs	r3, #0
 800363e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003640:	231e      	movs	r3, #30
 8003642:	18fb      	adds	r3, r7, r3
 8003644:	2201      	movs	r2, #1
 8003646:	701a      	strb	r2, [r3, #0]
        break;
 8003648:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d01e      	beq.n	800368e <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	085a      	lsrs	r2, r3, #1
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	18d2      	adds	r2, r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	0019      	movs	r1, r3
 8003660:	0010      	movs	r0, r2
 8003662:	f7fc fd51 	bl	8000108 <__udivsi3>
 8003666:	0003      	movs	r3, r0
 8003668:	b29b      	uxth	r3, r3
 800366a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	2b0f      	cmp	r3, #15
 8003670:	d909      	bls.n	8003686 <UART_SetConfig+0x2ca>
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	2380      	movs	r3, #128	; 0x80
 8003676:	025b      	lsls	r3, r3, #9
 8003678:	429a      	cmp	r2, r3
 800367a:	d204      	bcs.n	8003686 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	60da      	str	r2, [r3, #12]
 8003684:	e003      	b.n	800368e <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8003686:	231e      	movs	r3, #30
 8003688:	18fb      	adds	r3, r7, r3
 800368a:	2201      	movs	r2, #1
 800368c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800369a:	231e      	movs	r3, #30
 800369c:	18fb      	adds	r3, r7, r3
 800369e:	781b      	ldrb	r3, [r3, #0]
}
 80036a0:	0018      	movs	r0, r3
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b008      	add	sp, #32
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	efff69f3 	.word	0xefff69f3
 80036ac:	ffffcfff 	.word	0xffffcfff
 80036b0:	fffff4ff 	.word	0xfffff4ff
 80036b4:	40013800 	.word	0x40013800
 80036b8:	40021000 	.word	0x40021000
 80036bc:	40004400 	.word	0x40004400
 80036c0:	40004800 	.word	0x40004800
 80036c4:	40004c00 	.word	0x40004c00
 80036c8:	007a1200 	.word	0x007a1200

080036cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	2201      	movs	r2, #1
 80036da:	4013      	ands	r3, r2
 80036dc:	d00b      	beq.n	80036f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	4a4a      	ldr	r2, [pc, #296]	; (8003810 <UART_AdvFeatureConfig+0x144>)
 80036e6:	4013      	ands	r3, r2
 80036e8:	0019      	movs	r1, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	2202      	movs	r2, #2
 80036fc:	4013      	ands	r3, r2
 80036fe:	d00b      	beq.n	8003718 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	4a43      	ldr	r2, [pc, #268]	; (8003814 <UART_AdvFeatureConfig+0x148>)
 8003708:	4013      	ands	r3, r2
 800370a:	0019      	movs	r1, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	2204      	movs	r2, #4
 800371e:	4013      	ands	r3, r2
 8003720:	d00b      	beq.n	800373a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	4a3b      	ldr	r2, [pc, #236]	; (8003818 <UART_AdvFeatureConfig+0x14c>)
 800372a:	4013      	ands	r3, r2
 800372c:	0019      	movs	r1, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	2208      	movs	r2, #8
 8003740:	4013      	ands	r3, r2
 8003742:	d00b      	beq.n	800375c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	4a34      	ldr	r2, [pc, #208]	; (800381c <UART_AdvFeatureConfig+0x150>)
 800374c:	4013      	ands	r3, r2
 800374e:	0019      	movs	r1, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	2210      	movs	r2, #16
 8003762:	4013      	ands	r3, r2
 8003764:	d00b      	beq.n	800377e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	4a2c      	ldr	r2, [pc, #176]	; (8003820 <UART_AdvFeatureConfig+0x154>)
 800376e:	4013      	ands	r3, r2
 8003770:	0019      	movs	r1, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	2220      	movs	r2, #32
 8003784:	4013      	ands	r3, r2
 8003786:	d00b      	beq.n	80037a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	4a25      	ldr	r2, [pc, #148]	; (8003824 <UART_AdvFeatureConfig+0x158>)
 8003790:	4013      	ands	r3, r2
 8003792:	0019      	movs	r1, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	2240      	movs	r2, #64	; 0x40
 80037a6:	4013      	ands	r3, r2
 80037a8:	d01d      	beq.n	80037e6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	4a1d      	ldr	r2, [pc, #116]	; (8003828 <UART_AdvFeatureConfig+0x15c>)
 80037b2:	4013      	ands	r3, r2
 80037b4:	0019      	movs	r1, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037c6:	2380      	movs	r3, #128	; 0x80
 80037c8:	035b      	lsls	r3, r3, #13
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d10b      	bne.n	80037e6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	4a15      	ldr	r2, [pc, #84]	; (800382c <UART_AdvFeatureConfig+0x160>)
 80037d6:	4013      	ands	r3, r2
 80037d8:	0019      	movs	r1, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	2280      	movs	r2, #128	; 0x80
 80037ec:	4013      	ands	r3, r2
 80037ee:	d00b      	beq.n	8003808 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	4a0e      	ldr	r2, [pc, #56]	; (8003830 <UART_AdvFeatureConfig+0x164>)
 80037f8:	4013      	ands	r3, r2
 80037fa:	0019      	movs	r1, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	605a      	str	r2, [r3, #4]
  }
}
 8003808:	46c0      	nop			; (mov r8, r8)
 800380a:	46bd      	mov	sp, r7
 800380c:	b002      	add	sp, #8
 800380e:	bd80      	pop	{r7, pc}
 8003810:	fffdffff 	.word	0xfffdffff
 8003814:	fffeffff 	.word	0xfffeffff
 8003818:	fffbffff 	.word	0xfffbffff
 800381c:	ffff7fff 	.word	0xffff7fff
 8003820:	ffffefff 	.word	0xffffefff
 8003824:	ffffdfff 	.word	0xffffdfff
 8003828:	ffefffff 	.word	0xffefffff
 800382c:	ff9fffff 	.word	0xff9fffff
 8003830:	fff7ffff 	.word	0xfff7ffff

08003834 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af02      	add	r7, sp, #8
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2280      	movs	r2, #128	; 0x80
 8003840:	2100      	movs	r1, #0
 8003842:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003844:	f7fd fa06 	bl	8000c54 <HAL_GetTick>
 8003848:	0003      	movs	r3, r0
 800384a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2208      	movs	r2, #8
 8003854:	4013      	ands	r3, r2
 8003856:	2b08      	cmp	r3, #8
 8003858:	d10c      	bne.n	8003874 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2280      	movs	r2, #128	; 0x80
 800385e:	0391      	lsls	r1, r2, #14
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	4a17      	ldr	r2, [pc, #92]	; (80038c0 <UART_CheckIdleState+0x8c>)
 8003864:	9200      	str	r2, [sp, #0]
 8003866:	2200      	movs	r2, #0
 8003868:	f000 f82c 	bl	80038c4 <UART_WaitOnFlagUntilTimeout>
 800386c:	1e03      	subs	r3, r0, #0
 800386e:	d001      	beq.n	8003874 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e021      	b.n	80038b8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2204      	movs	r2, #4
 800387c:	4013      	ands	r3, r2
 800387e:	2b04      	cmp	r3, #4
 8003880:	d10c      	bne.n	800389c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2280      	movs	r2, #128	; 0x80
 8003886:	03d1      	lsls	r1, r2, #15
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	4a0d      	ldr	r2, [pc, #52]	; (80038c0 <UART_CheckIdleState+0x8c>)
 800388c:	9200      	str	r2, [sp, #0]
 800388e:	2200      	movs	r2, #0
 8003890:	f000 f818 	bl	80038c4 <UART_WaitOnFlagUntilTimeout>
 8003894:	1e03      	subs	r3, r0, #0
 8003896:	d001      	beq.n	800389c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e00d      	b.n	80038b8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2220      	movs	r2, #32
 80038a0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2220      	movs	r2, #32
 80038a6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2274      	movs	r2, #116	; 0x74
 80038b2:	2100      	movs	r1, #0
 80038b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	0018      	movs	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	b004      	add	sp, #16
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	01ffffff 	.word	0x01ffffff

080038c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b094      	sub	sp, #80	; 0x50
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	603b      	str	r3, [r7, #0]
 80038d0:	1dfb      	adds	r3, r7, #7
 80038d2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038d4:	e0a3      	b.n	8003a1e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038d8:	3301      	adds	r3, #1
 80038da:	d100      	bne.n	80038de <UART_WaitOnFlagUntilTimeout+0x1a>
 80038dc:	e09f      	b.n	8003a1e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038de:	f7fd f9b9 	bl	8000c54 <HAL_GetTick>
 80038e2:	0002      	movs	r2, r0
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d302      	bcc.n	80038f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80038ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d13d      	bne.n	8003970 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038f4:	f3ef 8310 	mrs	r3, PRIMASK
 80038f8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80038fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038fc:	647b      	str	r3, [r7, #68]	; 0x44
 80038fe:	2301      	movs	r3, #1
 8003900:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003904:	f383 8810 	msr	PRIMASK, r3
}
 8003908:	46c0      	nop			; (mov r8, r8)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	494c      	ldr	r1, [pc, #304]	; (8003a48 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003916:	400a      	ands	r2, r1
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800391c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800391e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003920:	f383 8810 	msr	PRIMASK, r3
}
 8003924:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003926:	f3ef 8310 	mrs	r3, PRIMASK
 800392a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800392c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800392e:	643b      	str	r3, [r7, #64]	; 0x40
 8003930:	2301      	movs	r3, #1
 8003932:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003936:	f383 8810 	msr	PRIMASK, r3
}
 800393a:	46c0      	nop			; (mov r8, r8)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2101      	movs	r1, #1
 8003948:	438a      	bics	r2, r1
 800394a:	609a      	str	r2, [r3, #8]
 800394c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800394e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003952:	f383 8810 	msr	PRIMASK, r3
}
 8003956:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2220      	movs	r2, #32
 800395c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2220      	movs	r2, #32
 8003962:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2274      	movs	r2, #116	; 0x74
 8003968:	2100      	movs	r1, #0
 800396a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e067      	b.n	8003a40 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2204      	movs	r2, #4
 8003978:	4013      	ands	r3, r2
 800397a:	d050      	beq.n	8003a1e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	69da      	ldr	r2, [r3, #28]
 8003982:	2380      	movs	r3, #128	; 0x80
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	401a      	ands	r2, r3
 8003988:	2380      	movs	r3, #128	; 0x80
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	429a      	cmp	r2, r3
 800398e:	d146      	bne.n	8003a1e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2280      	movs	r2, #128	; 0x80
 8003996:	0112      	lsls	r2, r2, #4
 8003998:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800399a:	f3ef 8310 	mrs	r3, PRIMASK
 800399e:	613b      	str	r3, [r7, #16]
  return(result);
 80039a0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039a4:	2301      	movs	r3, #1
 80039a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f383 8810 	msr	PRIMASK, r3
}
 80039ae:	46c0      	nop			; (mov r8, r8)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4923      	ldr	r1, [pc, #140]	; (8003a48 <UART_WaitOnFlagUntilTimeout+0x184>)
 80039bc:	400a      	ands	r2, r1
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	f383 8810 	msr	PRIMASK, r3
}
 80039ca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039cc:	f3ef 8310 	mrs	r3, PRIMASK
 80039d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80039d2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80039d6:	2301      	movs	r3, #1
 80039d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	f383 8810 	msr	PRIMASK, r3
}
 80039e0:	46c0      	nop			; (mov r8, r8)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2101      	movs	r1, #1
 80039ee:	438a      	bics	r2, r1
 80039f0:	609a      	str	r2, [r3, #8]
 80039f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039f4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	f383 8810 	msr	PRIMASK, r3
}
 80039fc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2220      	movs	r2, #32
 8003a02:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2220      	movs	r2, #32
 8003a08:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2280      	movs	r2, #128	; 0x80
 8003a0e:	2120      	movs	r1, #32
 8003a10:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2274      	movs	r2, #116	; 0x74
 8003a16:	2100      	movs	r1, #0
 8003a18:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e010      	b.n	8003a40 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	4013      	ands	r3, r2
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	425a      	negs	r2, r3
 8003a2e:	4153      	adcs	r3, r2
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	001a      	movs	r2, r3
 8003a34:	1dfb      	adds	r3, r7, #7
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d100      	bne.n	8003a3e <UART_WaitOnFlagUntilTimeout+0x17a>
 8003a3c:	e74b      	b.n	80038d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	0018      	movs	r0, r3
 8003a42:	46bd      	mov	sp, r7
 8003a44:	b014      	add	sp, #80	; 0x50
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	fffffe5f 	.word	0xfffffe5f

08003a4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b08e      	sub	sp, #56	; 0x38
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a54:	f3ef 8310 	mrs	r3, PRIMASK
 8003a58:	617b      	str	r3, [r7, #20]
  return(result);
 8003a5a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a5c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a5e:	2301      	movs	r3, #1
 8003a60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	f383 8810 	msr	PRIMASK, r3
}
 8003a68:	46c0      	nop			; (mov r8, r8)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4925      	ldr	r1, [pc, #148]	; (8003b0c <UART_EndRxTransfer+0xc0>)
 8003a76:	400a      	ands	r2, r1
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	f383 8810 	msr	PRIMASK, r3
}
 8003a84:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a86:	f3ef 8310 	mrs	r3, PRIMASK
 8003a8a:	623b      	str	r3, [r7, #32]
  return(result);
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a8e:	633b      	str	r3, [r7, #48]	; 0x30
 8003a90:	2301      	movs	r3, #1
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	f383 8810 	msr	PRIMASK, r3
}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689a      	ldr	r2, [r3, #8]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	438a      	bics	r2, r1
 8003aaa:	609a      	str	r2, [r3, #8]
 8003aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab2:	f383 8810 	msr	PRIMASK, r3
}
 8003ab6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d118      	bne.n	8003af2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ac0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ac4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ac6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aca:	2301      	movs	r3, #1
 8003acc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f383 8810 	msr	PRIMASK, r3
}
 8003ad4:	46c0      	nop			; (mov r8, r8)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2110      	movs	r1, #16
 8003ae2:	438a      	bics	r2, r1
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	f383 8810 	msr	PRIMASK, r3
}
 8003af0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2220      	movs	r2, #32
 8003af6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003b04:	46c0      	nop			; (mov r8, r8)
 8003b06:	46bd      	mov	sp, r7
 8003b08:	b00e      	add	sp, #56	; 0x38
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	fffffedf 	.word	0xfffffedf

08003b10 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	225a      	movs	r2, #90	; 0x5a
 8003b22:	2100      	movs	r1, #0
 8003b24:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2252      	movs	r2, #82	; 0x52
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	0018      	movs	r0, r3
 8003b32:	f7ff fc2f 	bl	8003394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b36:	46c0      	nop			; (mov r8, r8)
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	b004      	add	sp, #16
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b086      	sub	sp, #24
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b46:	f3ef 8310 	mrs	r3, PRIMASK
 8003b4a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b4c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b4e:	617b      	str	r3, [r7, #20]
 8003b50:	2301      	movs	r3, #1
 8003b52:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f383 8810 	msr	PRIMASK, r3
}
 8003b5a:	46c0      	nop			; (mov r8, r8)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2140      	movs	r1, #64	; 0x40
 8003b68:	438a      	bics	r2, r1
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	f383 8810 	msr	PRIMASK, r3
}
 8003b76:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	0018      	movs	r0, r3
 8003b88:	f7ff fbfc 	bl	8003384 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b8c:	46c0      	nop			; (mov r8, r8)
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	b006      	add	sp, #24
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003b9c:	46c0      	nop			; (mov r8, r8)
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	b002      	add	sp, #8
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <__libc_init_array>:
 8003ba4:	b570      	push	{r4, r5, r6, lr}
 8003ba6:	2600      	movs	r6, #0
 8003ba8:	4d0c      	ldr	r5, [pc, #48]	; (8003bdc <__libc_init_array+0x38>)
 8003baa:	4c0d      	ldr	r4, [pc, #52]	; (8003be0 <__libc_init_array+0x3c>)
 8003bac:	1b64      	subs	r4, r4, r5
 8003bae:	10a4      	asrs	r4, r4, #2
 8003bb0:	42a6      	cmp	r6, r4
 8003bb2:	d109      	bne.n	8003bc8 <__libc_init_array+0x24>
 8003bb4:	2600      	movs	r6, #0
 8003bb6:	f000 f821 	bl	8003bfc <_init>
 8003bba:	4d0a      	ldr	r5, [pc, #40]	; (8003be4 <__libc_init_array+0x40>)
 8003bbc:	4c0a      	ldr	r4, [pc, #40]	; (8003be8 <__libc_init_array+0x44>)
 8003bbe:	1b64      	subs	r4, r4, r5
 8003bc0:	10a4      	asrs	r4, r4, #2
 8003bc2:	42a6      	cmp	r6, r4
 8003bc4:	d105      	bne.n	8003bd2 <__libc_init_array+0x2e>
 8003bc6:	bd70      	pop	{r4, r5, r6, pc}
 8003bc8:	00b3      	lsls	r3, r6, #2
 8003bca:	58eb      	ldr	r3, [r5, r3]
 8003bcc:	4798      	blx	r3
 8003bce:	3601      	adds	r6, #1
 8003bd0:	e7ee      	b.n	8003bb0 <__libc_init_array+0xc>
 8003bd2:	00b3      	lsls	r3, r6, #2
 8003bd4:	58eb      	ldr	r3, [r5, r3]
 8003bd6:	4798      	blx	r3
 8003bd8:	3601      	adds	r6, #1
 8003bda:	e7f2      	b.n	8003bc2 <__libc_init_array+0x1e>
 8003bdc:	08003c4c 	.word	0x08003c4c
 8003be0:	08003c4c 	.word	0x08003c4c
 8003be4:	08003c4c 	.word	0x08003c4c
 8003be8:	08003c50 	.word	0x08003c50

08003bec <memset>:
 8003bec:	0003      	movs	r3, r0
 8003bee:	1882      	adds	r2, r0, r2
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d100      	bne.n	8003bf6 <memset+0xa>
 8003bf4:	4770      	bx	lr
 8003bf6:	7019      	strb	r1, [r3, #0]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	e7f9      	b.n	8003bf0 <memset+0x4>

08003bfc <_init>:
 8003bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bfe:	46c0      	nop			; (mov r8, r8)
 8003c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c02:	bc08      	pop	{r3}
 8003c04:	469e      	mov	lr, r3
 8003c06:	4770      	bx	lr

08003c08 <_fini>:
 8003c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c0e:	bc08      	pop	{r3}
 8003c10:	469e      	mov	lr, r3
 8003c12:	4770      	bx	lr
